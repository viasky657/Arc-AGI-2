{
    "instance_id": "cpp__phone-number",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/phone_number.cpp b/phone_number.cpp\nindex bf7dd6d..bc49751 100644\n--- a/phone_number.cpp\n+++ b/phone_number.cpp\n@@ -1,5 +1,36 @@\n #include \"phone_number.h\"\n+#include <cctype>\n \n namespace phone_number {\n \n-}  // namespace phone_number\n+PhoneNumber::PhoneNumber(const std::string &number) {\n+    std::string digits;\n+    for (char c : number) {\n+        if (std::isdigit(c)) {\n+            digits.push_back(c);\n+        }\n+    }\n+\n+    // Handle country code if 11 digits and first digit is '1'\n+    if (digits.size() == 11 && digits[0] == '1') {\n+        digits.erase(0, 1);\n+    } else if (digits.size() != 10) {\n+        clean_number_ = \"0000000000\";\n+        return;\n+    }\n+\n+    // Validate NANP rules: the first digit of area code and exchange code must be between 2 and 9\n+    // We can use the valid_N helper from the header\n+    if (!valid_N(digits[0]) || !valid_N(digits[3])) {\n+        clean_number_ = \"0000000000\";\n+        return;\n+    }\n+\n+    clean_number_ = digits;\n+}\n+\n+std::string PhoneNumber::number() const {\n+    return clean_number_;\n+}\n+\n+} // namespace phone_number\ndiff --git a/phone_number.h b/phone_number.h\nindex 1f25cdd..4b69701 100644\n--- a/phone_number.h\n+++ b/phone_number.h\n@@ -1,8 +1,27 @@\n-#if !defined(PHONE_NUMBER_H)\n+#ifndef PHONE_NUMBER_H\n #define PHONE_NUMBER_H\n \n+#include <string>\n+\n namespace phone_number {\n \n-}  // namespace phone_number\n+class PhoneNumber {\n+public:\n+    // Constructs a PhoneNumber from the given input string and cleans it up\n+    explicit PhoneNumber(const std::string &number);\n+\n+    // Returns the cleaned phone number if valid, or \"0000000000\" if invalid\n+    std::string number() const;\n+\n+private:\n+    std::string clean_number_;\n+\n+    // Helper function to determine if a digit char is valid for N position (2-9)\n+    bool valid_N(char c) const {\n+        return (c >= '2' && c <= '9');\n+    }\n+};\n+\n+} // namespace phone_number\n \n-#endif // PHONE_NUMBER_H\n\\ No newline at end of file\n+#endif // PHONE_NUMBER_H\ndiff --git a/phone_number_test.cpp b/phone_number_test.cpp\nnew file mode 100644\nindex 0000000..e97b244\n--- /dev/null\n+++ b/phone_number_test.cpp\n@@ -0,0 +1,47 @@\n+#include \"phone_number.h\"\n+#include \"catch.hpp\"\n+\n+TEST_CASE(\"cleans the number\") {\n+    phone_number::PhoneNumber pn(\"(223) 456-7890\");\n+    REQUIRE(pn.number() == \"2234567890\");\n+}\n+\n+TEST_CASE(\"cleans numbers with dots\") {\n+    phone_number::PhoneNumber pn(\"223.456.7890\");\n+    REQUIRE(pn.number() == \"2234567890\");\n+}\n+\n+TEST_CASE(\"cleans numbers with multiple spaces\") {\n+    phone_number::PhoneNumber pn(\"223 456   7890   \");\n+    REQUIRE(pn.number() == \"2234567890\");\n+}\n+\n+TEST_CASE(\"invalid when less than 10 digits\") {\n+    phone_number::PhoneNumber pn(\"123456789\");\n+    REQUIRE(pn.number() == \"0000000000\");\n+}\n+\n+TEST_CASE(\"invalid when 11 digits and does not start with a 1\") {\n+    phone_number::PhoneNumber pn(\"22234567890\");\n+    REQUIRE(pn.number() == \"0000000000\");\n+}\n+\n+TEST_CASE(\"valid when 11 digits and starting with 1\") {\n+    phone_number::PhoneNumber pn(\"12234567890\");\n+    REQUIRE(pn.number() == \"2234567890\");\n+}\n+\n+TEST_CASE(\"invalid when more than 11 digits\") {\n+    phone_number::PhoneNumber pn(\"321234567890\");\n+    REQUIRE(pn.number() == \"0000000000\");\n+}\n+\n+TEST_CASE(\"invalid when area code does not start with 2-9\") {\n+    phone_number::PhoneNumber pn(\"(123) 456-7890\");\n+    REQUIRE(pn.number() == \"0000000000\");\n+}\n+\n+TEST_CASE(\"invalid when exchange code does not start with 2-9\") {\n+    phone_number::PhoneNumber pn(\"(223) 156-7890\");\n+    REQUIRE(pn.number() == \"0000000000\");\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}