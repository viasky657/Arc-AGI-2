{
    "instance_id": "cpp__clock",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/clock.cpp b/clock.cpp\nindex e109f59..96bdc48 100644\n--- a/clock.cpp\n+++ b/clock.cpp\n@@ -1,5 +1,39 @@\n #include \"clock.h\"\n+#include <iomanip>\n+#include <sstream>\n \n namespace date_independent {\n \n-}  // namespace date_independent\n+Clock::Clock(int h, int m) : hour(h), minute(m) {\n+    normalize();\n+}\n+\n+Clock Clock::add(int minutesToAdd) const {\n+    Clock newClock(hour, minute + minutesToAdd);\n+    // normalize() is already called in constructor\n+    return newClock;\n+}\n+\n+std::string Clock::to_string() const {\n+    std::ostringstream oss;\n+    oss << std::setw(2) << std::setfill('0') << hour\n+        << \":\" << std::setw(2) << std::setfill('0') << minute;\n+    return oss.str();\n+}\n+\n+bool Clock::operator==(const Clock &other) const {\n+    return hour == other.hour && minute == other.minute;\n+}\n+\n+void Clock::normalize() {\n+    // Convert current time to total minutes\n+    int totalMinutes = hour * 60 + minute;\n+    \n+    // Normalize totalMinutes to ensure it is within a 24-hour period (0 to 1439 minutes)\n+    totalMinutes = ((totalMinutes % (24 * 60)) + (24 * 60)) % (24 * 60);\n+\n+    hour = totalMinutes / 60;\n+    minute = totalMinutes % 60;\n+}\n+\n+} // namespace date_independent\ndiff --git a/clock.h b/clock.h\nindex 44d3e92..4191fc7 100644\n--- a/clock.h\n+++ b/clock.h\n@@ -1,8 +1,32 @@\n-#if !defined(CLOCK_H)\n+#ifndef CLOCK_H\n #define CLOCK_H\n \n+#include <string>\n+\n namespace date_independent {\n \n-}  // namespace date_independent\n+class Clock {\n+public:\n+    // Constructs a clock initialized with the given hour and minute (normalized to a 24-hour period)\n+    Clock(int hour, int minute);\n+\n+    // Returns a new Clock with the added minutes (can be negative for subtraction)\n+    Clock add(int minutes) const;\n+\n+    // Returns the string representation of the clock in HH:MM format\n+    std::string to_string() const;\n+\n+    // Equality operator: Two clocks are equal if their hour and minute representations are identical\n+    bool operator==(const Clock &other) const;\n+\n+private:\n+    int hour;\n+    int minute;\n+\n+    // Helper to normalize the time within a 0-23 hour and 0-59 minute range\n+    void normalize();\n+};\n+\n+} // namespace date_independent\n \n-#endif // CLOCK_H\n\\ No newline at end of file\n+#endif // CLOCK_H\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}