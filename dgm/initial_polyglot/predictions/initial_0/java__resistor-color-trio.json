{
    "instance_id": "java__resistor-color-trio",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/ResistorColorTrio.java b/src/main/java/ResistorColorTrio.java\nindex 69ccf19..19e4b8c 100644\n--- a/src/main/java/ResistorColorTrio.java\n+++ b/src/main/java/ResistorColorTrio.java\n@@ -1,5 +1,44 @@\n class ResistorColorTrio {\n     String label(String[] colors) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        // Colors mapping as per resistor color codes\n+        String[] COLORS = {\"black\", \"brown\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\", \"grey\", \"white\"};\n+        \n+        int firstDigit = digitForColor(colors[0], COLORS);\n+        int secondDigit = digitForColor(colors[1], COLORS);\n+        int multiplier = digitForColor(colors[2], COLORS);\n+        \n+        int baseValue = firstDigit * 10 + secondDigit;\n+        \n+        // If the multiplier corresponds to a metric prefix (i.e. 3, 6, or 9), then use it\n+        if (multiplier >= 3 && (multiplier % 3) == 0) {\n+            String prefix;\n+            switch (multiplier) {\n+                case 3:\n+                    prefix = \"kilo\";\n+                    break;\n+                case 6:\n+                    prefix = \"mega\";\n+                    break;\n+                case 9:\n+                    prefix = \"giga\";\n+                    break;\n+                default:\n+                    prefix = \"\"; // Should not happen as colors are 0-9\n+            }\n+            return baseValue + \" \" + prefix + \"ohms\";\n+        } else {\n+            // Otherwise, compute the full ohm value and return with \"ohms\"\n+            long ohmValue = baseValue * (long)Math.pow(10, multiplier);\n+            return ohmValue + \" ohms\";\n+        }\n+    }\n+    \n+    private int digitForColor(String color, String[] COLORS) {\n+        for (int i = 0; i < COLORS.length; i++) {\n+            if (COLORS[i].equals(color)) {\n+                return i;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Invalid color: \" + color);\n     }\n }\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}