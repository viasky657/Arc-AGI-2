{
    "instance_id": "cpp__spiral-matrix",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/spiral_matrix.cpp b/spiral_matrix.cpp\nindex 3428b39..73518b6 100644\n--- a/spiral_matrix.cpp\n+++ b/spiral_matrix.cpp\n@@ -2,4 +2,47 @@\n \n namespace spiral_matrix {\n \n+std::vector<std::vector<int>> generate(int n) {\n+    std::vector<std::vector<int>> matrix(n, std::vector<int>(n, 0));\n+    if (n <= 0) return matrix;\n+\n+    int top = 0;\n+    int bottom = n - 1;\n+    int left = 0;\n+    int right = n - 1;\n+    int num = 1;\n+\n+    while (left <= right && top <= bottom) {\n+        // Traverse from left to right on the top row.\n+        for (int j = left; j <= right; ++j) {\n+            matrix[top][j] = num++;\n+        }\n+        ++top;\n+\n+        // Traverse from top to bottom on the right column.\n+        for (int i = top; i <= bottom; ++i) {\n+            matrix[i][right] = num++;\n+        }\n+        --right;\n+\n+        if (top <= bottom) {\n+            // Traverse from right to left on the bottom row.\n+            for (int j = right; j >= left; --j) {\n+                matrix[bottom][j] = num++;\n+            }\n+            --bottom;\n+        }\n+\n+        if (left <= right) {\n+            // Traverse from bottom to top on the left column.\n+            for (int i = bottom; i >= top; --i) {\n+                matrix[i][left] = num++;\n+            }\n+            ++left;\n+        }\n+    }\n+\n+    return matrix;\n+}\n+\n }  // namespace spiral_matrix\ndiff --git a/spiral_matrix.h b/spiral_matrix.h\nindex cc56ad3..108d577 100644\n--- a/spiral_matrix.h\n+++ b/spiral_matrix.h\n@@ -1,8 +1,17 @@\n-#if !defined(SPIRAL_MATRIX_H)\n+#ifndef SPIRAL_MATRIX_H\n #define SPIRAL_MATRIX_H\n \n+#include <vector>\n+\n namespace spiral_matrix {\n \n+// Generates a square matrix of size n filled with natural numbers in an inward clockwise spiral order.\n+// Example for n=3:\n+// 1 2 3\n+// 8 9 4\n+// 7 6 5\n+std::vector<std::vector<int>> generate(int n);\n+\n }  // namespace spiral_matrix\n \n #endif  // SPIRAL_MATRIX_H\ndiff --git a/test/test_spiral_matrix.cpp b/test/test_spiral_matrix.cpp\nnew file mode 100644\nindex 0000000..968c1a2\n--- /dev/null\n+++ b/test/test_spiral_matrix.cpp\n@@ -0,0 +1,58 @@\n+#include \"catch.hpp\"\n+#include \"../spiral_matrix.h\"\n+#include <vector>\n+\n+TEST_CASE(\"Spiral Matrix Generation for n=3\", \"[spiral_matrix]\") {\n+    int n = 3;\n+    std::vector<std::vector<int>> expected = {\n+        {1, 2, 3},\n+        {8, 9, 4},\n+        {7, 6, 5}\n+    };\n+    \n+    auto result = spiral_matrix::generate(n);\n+    \n+    REQUIRE(result.size() == expected.size());\n+    for (size_t i = 0; i < expected.size(); ++i) {\n+        REQUIRE(result[i].size() == expected[i].size());\n+        for (size_t j = 0; j < expected[i].size(); ++j) {\n+            INFO(\"At row \" << i << \", col \" << j);\n+            REQUIRE(result[i][j] == expected[i][j]);\n+        }\n+    }\n+}\n+\n+TEST_CASE(\"Spiral Matrix Generation for n=4\", \"[spiral_matrix]\") {\n+    int n = 4;\n+    std::vector<std::vector<int>> expected = {\n+        { 1,  2,  3,  4},\n+        {12, 13, 14,  5},\n+        {11, 16, 15,  6},\n+        {10,  9,  8,  7}\n+    };\n+    \n+    auto result = spiral_matrix::generate(n);\n+    \n+    REQUIRE(result.size() == expected.size());\n+    for (size_t i = 0; i < expected.size(); ++i) {\n+        REQUIRE(result[i].size() == expected[i].size());\n+        for (size_t j = 0; j < expected[i].size(); ++j) {\n+            INFO(\"At row \" << i << \", col \" << j);\n+            REQUIRE(result[i][j] == expected[i][j]);\n+        }\n+    }\n+}\n+\n+TEST_CASE(\"Spiral Matrix Generation for n=1\", \"[spiral_matrix]\") {\n+    int n = 1;\n+    std::vector<std::vector<int>> expected = {{1}};\n+    \n+    auto result = spiral_matrix::generate(n);\n+    REQUIRE(result == expected);\n+}\n+\n+TEST_CASE(\"Spiral Matrix Generation for n=0 (empty matrix)\", \"[spiral_matrix]\") {\n+    int n = 0;\n+    auto result = spiral_matrix::generate(n);\n+    REQUIRE(result.empty());\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}