{
    "instance_id": "go__bowling",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/bowling.go b/bowling.go\nindex 15b4fe4..c397715 100644\n--- a/bowling.go\n+++ b/bowling.go\n@@ -1,15 +1,64 @@\n package bowling\n \n-// Define the Game type here.\n+import \"errors\"\n \n+// Game represents a game of bowling where rolls are recorded.\n+// The rolls slice stores the number of pins knocked down with each roll.\n+// It is assumed that Score() is called only after the game is complete (10 frames).\n+\n+type Game struct {\n+\trolls []int\n+}\n+\n+// NewGame creates and returns a new instance of a bowling game.\n func NewGame() *Game {\n-\tpanic(\"Please implement the NewGame function\")\n+\treturn &Game{\n+\t\trolls: make([]int, 0, 21),\n+\t}\n }\n \n+// Roll records a roll in the game. It appends the number of pins knocked down.\n+// The function returns an error if the pin count is invalid.\n func (g *Game) Roll(pins int) error {\n-\tpanic(\"Please implement the Roll function\")\n+\tif pins < 0 || pins > 10 {\n+\t\treturn errors.New(\"invalid pin count\")\n+\t}\n+\t// Additional game completion logic could be added here.\n+\tg.rolls = append(g.rolls, pins)\n+\treturn nil\n }\n \n+// Score computes and returns the total score of the game if complete.\n+// It returns an error if the game is incomplete or if bonus rolls are missing.\n func (g *Game) Score() (int, error) {\n-\tpanic(\"Please implement the Score function\")\n+\tscore := 0\n+\trollIndex := 0\n+\tfor frame := 0; frame < 10; frame++ {\n+\t\tif rollIndex >= len(g.rolls) {\n+\t\t\treturn 0, errors.New(\"incomplete game: insufficient rolls\")\n+\t\t}\n+\t\t// Check for strike\n+\t\tif g.rolls[rollIndex] == 10 {\n+\t\t\tif rollIndex+2 >= len(g.rolls) {\n+\t\t\t\treturn 0, errors.New(\"incomplete game: strike bonus missing\")\n+\t\t\t}\n+\t\t\tscore += 10 + g.rolls[rollIndex+1] + g.rolls[rollIndex+2]\n+\t\t\trollIndex++\n+\t\t} else {\n+\t\t\tif rollIndex+1 >= len(g.rolls) {\n+\t\t\t\treturn 0, errors.New(\"incomplete game: frame missing second roll\")\n+\t\t\t}\n+\t\t\t// Check for spare\n+\t\t\tif g.rolls[rollIndex]+g.rolls[rollIndex+1] == 10 {\n+\t\t\t\tif rollIndex+2 >= len(g.rolls) {\n+\t\t\t\t\treturn 0, errors.New(\"incomplete game: spare bonus missing\")\n+\t\t\t\t}\n+\t\t\t\tscore += 10 + g.rolls[rollIndex+2]\n+\t\t\t} else {\n+\t\t\t\tscore += g.rolls[rollIndex] + g.rolls[rollIndex+1]\n+\t\t\t}\n+\t\t\trollIndex += 2\n+\t\t}\n+\t}\n+\treturn score, nil\n }\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}