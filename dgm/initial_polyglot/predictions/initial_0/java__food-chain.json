{
    "instance_id": "java__food-chain",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/FoodChain.java b/src/main/java/FoodChain.java\nindex 194494c..93803aa 100644\n--- a/src/main/java/FoodChain.java\n+++ b/src/main/java/FoodChain.java\n@@ -1,11 +1,82 @@\n class FoodChain {\n \n-    String verse(int verse) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    private static final String[] ANIMALS = {\n+        \"fly\",\n+        \"spider\",\n+        \"bird\",\n+        \"cat\",\n+        \"dog\",\n+        \"goat\",\n+        \"cow\",\n+        \"horse\"\n+    };\n+\n+    /*\n+     * Unique lines for each animal (except fly) in its verse.\n+     * For fly (index 0), there's no unique second line, the verse proceeds directly to the final line.\n+     * For horse (index 7), the verse is special.\n+     */\n+    private static final String[] UNIQUE_LINES = {\n+        \"\",  \n+        \"It wriggled and jiggled and tickled inside her.\",\n+        \"How absurd to swallow a bird!\",\n+        \"Imagine that, to swallow a cat!\",\n+        \"What a hog, to swallow a dog!\",\n+        \"Just opened her throat and swallowed a goat!\",\n+        \"I don't know how she swallowed a cow!\",\n+        \"She's dead, of course!\"\n+    };\n+\n+    public String verse(int verseNumber) {\n+        // verseNumber is 1-indexed. Valid verses are 1 to 8.\n+        int index = verseNumber - 1;\n+        StringBuilder sb = new StringBuilder();\n+\n+        // First line\n+        sb.append(\"I know an old lady who swallowed a \").append(ANIMALS[index]).append(\".\");\n+        sb.append(\"\\n\");\n+\n+        // Special case for horse verse (last verse)\n+        if (ANIMALS[index].equals(\"horse\")) {\n+            sb.append(UNIQUE_LINES[index]);\n+            return sb.toString();\n+        }\n+\n+        // For verses other than the fly (verse 1) and horse (verse 8)\n+        if (index > 0) {\n+            // Add the unique second line for this animal\n+            sb.append(UNIQUE_LINES[index]).append(\"\\n\");\n+\n+            // Add the cumulative part in reverse order\n+            for (int i = index; i >= 1; i--) {\n+                sb.append(\"She swallowed the \").append(ANIMALS[i]).append(\" to catch the \").append(ANIMALS[i - 1]);\n+                // Special handling for spider in the cumulative chain\n+                if (ANIMALS[i - 1].equals(\"spider\")) {\n+                    sb.append(\" that wriggled and jiggled and tickled inside her.\");\n+                } else {\n+                    sb.append(\".\");\n+                }\n+                sb.append(\"\\n\");\n+            }\n+            // Add the final line for verses except the horse verse\n+            sb.append(\"I don't know why she swallowed the fly. Perhaps she'll die.\");\n+        } else {\n+            // Verse 1: only two lines\n+            sb.append(\"I don't know why she swallowed the fly. Perhaps she'll die.\");\n+        }\n+\n+        return sb.toString();\n     }\n \n-    String verses(int startVerse, int endVerse) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    public String verses(int startVerse, int endVerse) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = startVerse; i <= endVerse; i++) {\n+            sb.append(verse(i));\n+            if (i < endVerse) {\n+                sb.append(\"\\n\\n\");\n+            }\n+        }\n+        return sb.toString();\n     }\n \n-}\n\\ No newline at end of file\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}