{
    "instance_id": "java__state-of-tic-tac-toe",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/StateOfTicTacToe.java b/src/main/java/StateOfTicTacToe.java\nindex 7dee729..9c875ec 100644\n--- a/src/main/java/StateOfTicTacToe.java\n+++ b/src/main/java/StateOfTicTacToe.java\n@@ -1,5 +1,95 @@\n-class StateOfTicTacToe {\n+public class StateOfTicTacToe {\n+\n     public GameState determineState(String[] board) {\n-        throw new UnsupportedOperationException(\"Please implement the StateOfTicTacToe.determineState() method.\");\n+        if (board == null || board.length != 3) {\n+            throw new IllegalArgumentException(\"Board must be an array of 3 strings.\");\n+        }\n+\n+        // Validate each row\n+        for (String row : board) {\n+            if (row == null || row.length() != 3) {\n+                throw new IllegalArgumentException(\"Each row must be a string of length 3.\");\n+            }\n+        }\n+        \n+        int countX = 0;\n+        int countO = 0;\n+\n+        // Count X and O\n+        for (String row : board) {\n+            for (char c : row.toCharArray()) {\n+                if (c == 'X') {\n+                    countX++;\n+                } else if (c == 'O') {\n+                    countO++;\n+                } else if (c != ' '){\n+                    throw new IllegalArgumentException(\"Invalid character on board: \" + c);\n+                }\n+            }\n+        }\n+\n+        // X always starts so countX should be equal to countO or exactly one more than countO\n+        if (!(countX == countO || countX == countO + 1)) {\n+            throw new IllegalStateException(\"Invalid board: wrong turn order\");\n+        }\n+\n+        boolean winX = hasWon(board, 'X');\n+        boolean winO = hasWon(board, 'O');\n+\n+        // Both players cannot win simultaneously\n+        if (winX && winO) {\n+            throw new IllegalStateException(\"Invalid board: both players cannot win\");\n+        }\n+\n+        // If X won, countX must be exactly one more than countO\n+        if (winX && countX != countO + 1) {\n+            throw new IllegalStateException(\"Invalid board: extra moves after win (X wins condition)\");\n+        }\n+\n+        // If O won, countX must be equal to countO\n+        if (winO && countX != countO) {\n+            throw new IllegalStateException(\"Invalid board: extra moves after win (O wins condition)\");\n+        }\n+\n+        // If a win has occurred, the game state is WIN\n+        if (winX || winO) {\n+            return GameState.WIN;\n+        }\n+\n+        // Check for ongoing vs draw: If there is any cell that is blank, game is ongoing\n+        for (String row : board) {\n+            if (row.contains(\" \")) {\n+                return GameState.ONGOING;\n+            }\n+        }\n+\n+        // Otherwise it's a draw\n+        return GameState.DRAW;\n+    }\n+\n+    private boolean hasWon(String[] board, char player) {\n+        // Check rows\n+        for (int i = 0; i < 3; i++) {\n+            if (board[i].charAt(0) == player && board[i].charAt(1) == player && board[i].charAt(2) == player) {\n+                return true;\n+            }\n+        }\n+        \n+        // Check columns\n+        for (int j = 0; j < 3; j++) {\n+            if (board[0].charAt(j) == player && board[1].charAt(j) == player && board[2].charAt(j) == player) {\n+                return true;\n+            }\n+        }\n+        \n+        // Check diagonals\n+        if (board[0].charAt(0) == player && board[1].charAt(1) == player && board[2].charAt(2) == player) {\n+            return true;\n+        }\n+        if (board[0].charAt(2) == player && board[1].charAt(1) == player && board[2].charAt(0) == player) {\n+            return true;\n+        }\n+        \n+        return false;\n     }\n }\ndiff --git a/src/main/java/GameState.java b/src/main/java/GameState.java\nnew file mode 100644\nindex 0000000..86a5fe7\n--- /dev/null\n+++ b/src/main/java/GameState.java\n@@ -0,0 +1,5 @@\n+public enum GameState {\n+    ONGOING,\n+    DRAW,\n+    WIN\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}