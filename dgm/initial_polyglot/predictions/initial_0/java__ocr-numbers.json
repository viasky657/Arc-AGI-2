{
    "instance_id": "java__ocr-numbers",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/OpticalCharacterReader.java b/src/main/java/OpticalCharacterReader.java\nindex cbbe27c..13245af 100644\n--- a/src/main/java/OpticalCharacterReader.java\n+++ b/src/main/java/OpticalCharacterReader.java\n@@ -1,9 +1,62 @@\n import java.util.List;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.ArrayList;\n \n class OpticalCharacterReader {\n \n-    String parse(List<String> input) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    public String parse(List<String> input) {\n+        // Check if the input has a number of lines that is a multiple of 4\n+        if (input == null || input.size() % 4 != 0) {\n+            return \"error\";\n+        }\n+\n+        // Define the OCR mapping for digits 0 to 9\n+        Map<String, Character> ocr = new HashMap<>();\n+        ocr.put(\" _ \\n| |\\n|_|\\n   \", '0');\n+        ocr.put(\"   \\n  |\\n  |\\n   \", '1');\n+        ocr.put(\" _ \\n _|\\n|_ \\n   \", '2');\n+        ocr.put(\" _ \\n _|\\n _|\\n   \", '3');\n+        ocr.put(\"   \\n|_|\\n  |\\n   \", '4');\n+        ocr.put(\" _ \\n|_ \\n _|\\n   \", '5');\n+        ocr.put(\" _ \\n|_ \\n|_|\\n   \", '6');\n+        ocr.put(\" _ \\n  |\\n  |\\n   \", '7');\n+        ocr.put(\" _ \\n|_|\\n|_|\\n   \", '8');\n+        ocr.put(\" _ \\n|_|\\n _|\\n   \", '9');\n+\n+        // Process the input in groups of 4 lines\n+        List<String> results = new ArrayList<>();\n+        for (int group = 0; group < input.size(); group += 4) {\n+            String line1 = input.get(group);\n+            String line2 = input.get(group + 1);\n+            String line3 = input.get(group + 2);\n+            String line4 = input.get(group + 3);\n+\n+            // All lines in a group must be of equal length and the length must be a multiple of 3\n+            int len = line1.length();\n+            if (line2.length() != len || line3.length() != len || line4.length() != len || len % 3 != 0) {\n+                return \"error\";\n+            }\n+\n+            int numDigits = len / 3;\n+            StringBuilder sb = new StringBuilder();\n+            for (int i = 0; i < numDigits; i++) {\n+                String pattern = line1.substring(i * 3, i * 3 + 3) + \"\\n\"\n+                        + line2.substring(i * 3, i * 3 + 3) + \"\\n\"\n+                        + line3.substring(i * 3, i * 3 + 3) + \"\\n\"\n+                        + line4.substring(i * 3, i * 3 + 3);\n+                Character digit = ocr.get(pattern);\n+                if (digit == null) {\n+                    sb.append(\"?\");\n+                } else {\n+                    sb.append(digit);\n+                }\n+            }\n+            results.add(sb.toString());\n+        }\n+\n+        // If there are multiple groups, join them with commas\n+        return String.join(\",\", results);\n     }\n \n-}\n\\ No newline at end of file\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}