{
    "instance_id": "cpp__allergies",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/allergies.cpp b/allergies.cpp\nindex a3771e7..d9a96b0 100644\n--- a/allergies.cpp\n+++ b/allergies.cpp\n@@ -1,5 +1,44 @@\n #include \"allergies.h\"\n+#include <vector>\n+#include <string>\n \n namespace allergies {\n \n-}  // namespace allergies\n+// Mapping of allergens to their respective scores (only lower 8 bits are considered)\n+static const std::vector<std::pair<std::string, unsigned>> allergen_scores = {\n+    {\"eggs\", 1},\n+    {\"peanuts\", 2},\n+    {\"shellfish\", 4},\n+    {\"strawberries\", 8},\n+    {\"tomatoes\", 16},\n+    {\"chocolate\", 32},\n+    {\"pollen\", 64},\n+    {\"cats\", 128}\n+};\n+\n+// Constructs an Allergies object from a given score. Only the lower 8 bits are considered.\n+Allergies::Allergies(unsigned score) : score_(score & 0xFF) {}\n+\n+// Returns true if the allergy score includes the given allergen.\n+// If the allergen is unknown, returns false.\n+bool Allergies::is_allergic_to(const std::string &allergen) const {\n+    for (const auto &entry : allergen_scores) {\n+        if (entry.first == allergen) {\n+            return (score_ & entry.second) != 0;\n+        }\n+    }\n+    return false;  // unknown allergen treated as non-allergic\n+}\n+\n+// Returns a list of all allergens (as strings) that the score indicates an allergy to.\n+std::vector<std::string> Allergies::get_allergies() const {\n+    std::vector<std::string> result;\n+    for (const auto &entry : allergen_scores) {\n+        if ((score_ & entry.second) != 0) {\n+            result.push_back(entry.first);\n+        }\n+    }\n+    return result;\n+}\n+\n+} // namespace allergies\ndiff --git a/allergies.h b/allergies.h\nindex e418783..9141e6c 100644\n--- a/allergies.h\n+++ b/allergies.h\n@@ -1,8 +1,26 @@\n #if !defined(ALLERGIES_H)\n #define ALLERGIES_H\n \n+#include <string>\n+#include <vector>\n+\n namespace allergies {\n \n-}  // namespace allergies\n+class Allergies {\n+public:\n+    // Construct an Allergies object from a given score. Only the lower 8 bits are considered.\n+    explicit Allergies(unsigned score);\n+\n+    // Returns true if the allergy score includes the given allergen.\n+    bool is_allergic_to(const std::string &allergen) const;\n+\n+    // Returns a list of all allergens (as strings) that the score indicates an allergy to.\n+    std::vector<std::string> get_allergies() const;\n+\n+private:\n+    unsigned score_;\n+};\n+\n+} // namespace allergies\n \n-#endif // ALLERGIES_H\n\\ No newline at end of file\n+#endif // ALLERGIES_H\ndiff --git a/test/test_allergies.cpp b/test/test_allergies.cpp\nnew file mode 100644\nindex 0000000..71e5257\n--- /dev/null\n+++ b/test/test_allergies.cpp\n@@ -0,0 +1,54 @@\n+#include \"catch.hpp\"\n+#include \"allergies.h\"\n+#include <vector>\n+#include <string>\n+#include <algorithm>\n+\n+TEST_CASE(\"Allergies - is_allergic_to and get_allergies\") {\n+    // 34 = 32 (chocolate) + 2 (peanuts)\n+    allergies::Allergies a(34);\n+\n+    SECTION(\"Check allergic to peanuts\") {\n+        REQUIRE(a.is_allergic_to(\"peanuts\") == true);\n+    }\n+    \n+    SECTION(\"Check allergic to chocolate\") {\n+        REQUIRE(a.is_allergic_to(\"chocolate\") == true);\n+    }\n+    \n+    SECTION(\"Check not allergic to eggs\") {\n+        REQUIRE(a.is_allergic_to(\"eggs\") == false);\n+    }\n+    \n+    SECTION(\"Check get_allergies returns peanuts and chocolate only\") {\n+        std::vector<std::string> expected = {\"peanuts\", \"chocolate\"};\n+        auto allergiesList = a.get_allergies();\n+        \n+        // Since the order in our implementation is fixed as in allergen_scores,\n+        // but to be safe, we sort before comparing.\n+        std::sort(allergiesList.begin(), allergiesList.end());\n+        std::sort(expected.begin(), expected.end());\n+        \n+        REQUIRE(allergiesList == expected);\n+    }\n+}\n+\n+TEST_CASE(\"Score includes extra unrelated allergies\") {\n+    // Score 257 has extra component (256) which should be ignored and only eggs (1) is considered\n+    allergies::Allergies a(257);\n+    \n+    SECTION(\"Check allergic to eggs\") {\n+        REQUIRE(a.is_allergic_to(\"eggs\") == true);\n+    }\n+    \n+    SECTION(\"Check get_allergies returns only eggs\") {\n+        auto list = a.get_allergies();\n+        REQUIRE(list.size() == 1);\n+        REQUIRE(list[0] == \"eggs\");\n+    }\n+}\n+\n+TEST_CASE(\"Unknown allergen returns false\") {\n+    allergies::Allergies a(255); // all eight allergens\n+    REQUIRE(a.is_allergic_to(\"gluten\") == false);\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}