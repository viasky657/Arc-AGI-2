{
    "instance_id": "java__rational-numbers",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/Rational.java b/src/main/java/Rational.java\nindex 9c7905e..255b65b 100644\n--- a/src/main/java/Rational.java\n+++ b/src/main/java/Rational.java\n@@ -2,44 +2,118 @@ import java.util.Objects;\n \n class Rational {\n \n+    private final int numerator;\n+    private final int denominator;\n+\n+    // Constructor: creates a rational number and reduces to lowest terms.\n+    // If denominator is zero, throws IllegalArgumentException (if both are zero, also throw exception).\n     Rational(int numerator, int denominator) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        if (denominator == 0) {\n+            throw new IllegalArgumentException(\"Denominator must not be zero\");\n+        }\n+        // Reduce the fraction\n+        int gcd = gcd(Math.abs(numerator), Math.abs(denominator));\n+        // Normalize sign: denominator always positive\n+        if (denominator < 0) {\n+            gcd = -gcd;\n+        }\n+        this.numerator = numerator / gcd;\n+        this.denominator = denominator / gcd;\n+    }\n+\n+    // Helper function to compute the greatest common divisor\n+    private static int gcd(int a, int b) {\n+        while (b != 0) {\n+            int temp = a % b;\n+            a = b;\n+            b = temp;\n+        }\n+        return a == 0 ? 1 : a;\n     }\n \n     int getNumerator() {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        return numerator;\n     }\n \n     int getDenominator() {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        return denominator;\n     }\n \n     Rational add(Rational other) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        int newNumerator = this.numerator * other.denominator + other.numerator * this.denominator;\n+        int newDenominator = this.denominator * other.denominator;\n+        return new Rational(newNumerator, newDenominator);\n     }\n \n     Rational subtract(Rational other) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        int newNumerator = this.numerator * other.denominator - other.numerator * this.denominator;\n+        int newDenominator = this.denominator * other.denominator;\n+        return new Rational(newNumerator, newDenominator);\n     }\n \n     Rational multiply(Rational other) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        int newNumerator = this.numerator * other.numerator;\n+        int newDenominator = this.denominator * other.denominator;\n+        return new Rational(newNumerator, newDenominator);\n     }\n \n     Rational divide(Rational other) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        if (other.numerator == 0) {\n+            throw new ArithmeticException(\"Cannot divide by zero\");\n+        }\n+        int newNumerator = this.numerator * other.denominator;\n+        int newDenominator = this.denominator * other.numerator;\n+        // Handle sign in constructor\n+        return new Rational(newNumerator, newDenominator);\n     }\n \n     Rational abs() {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        return new Rational(Math.abs(this.numerator), Math.abs(this.denominator));\n     }\n \n+    // Helper method for integer exponentiation\n+    private static int ipow(int base, int exp) {\n+        if(exp < 0) {\n+            throw new IllegalArgumentException(\"Negative exponent not supported in ipow\");\n+        }\n+        int result = 1;\n+        for (int i = 0; i < exp; i++) {\n+            result *= base;\n+        }\n+        return result;\n+    }\n+\n+    // Raise this rational number to an integer power.\n+    // For non-negative power, (a/b)^n = (a^n)/(b^n).\n+    // For negative power, (a/b)^n = (b^|n|)/(a^|n|), provided a != 0.\n     Rational pow(int power) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        if (power >= 0) {\n+            int newNumerator = ipow(this.numerator, power);\n+            int newDenominator = ipow(this.denominator, power);\n+            return new Rational(newNumerator, newDenominator);\n+        } else {\n+            if (this.numerator == 0) {\n+                throw new ArithmeticException(\"Cannot raise zero to a negative power\");\n+            }\n+            int absPower = -power;\n+            int newNumerator = ipow(this.denominator, absPower);\n+            int newDenominator = ipow(this.numerator, absPower);\n+            return new Rational(newNumerator, newDenominator);\n+        }\n     }\n \n+    // Exponentiation of this rational number to a real (floating point) exponent.\n+    // Returns (a^exponent) / (b^exponent) as a double.\n     double exp(double exponent) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        return Math.pow(this.numerator, exponent) / Math.pow(this.denominator, exponent);\n+    }\n+\n+    // Exponentiation of a real number to this rational number.\n+    // This computes x^(a/b) = (x^a)^(1/b).\n+    // Assumes denominator is positive as per standard form.\n+    // For negative base and even denominators, the result may be NaN.\n+    double of(double base) {\n+        return Math.pow(Math.pow(base, this.numerator), 1.0 / this.denominator);\n     }\n \n     @Override\n@@ -53,7 +127,6 @@ class Rational {\n             return this.getNumerator() == other.getNumerator()\n                     && this.getDenominator() == other.getDenominator();\n         }\n-\n         return false;\n     }\n \n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}