{
    "instance_id": "go__protein-translation",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/protein_translation.go b/protein_translation.go\nindex 993ab7a..bfd3607 100644\n--- a/protein_translation.go\n+++ b/protein_translation.go\n@@ -1,9 +1,52 @@\n package protein\n \n-func FromRNA(rna string) ([]string, error) {\n-\tpanic(\"Please implement the FromRNA function\")\n+import \"errors\"\n+\n+var codonMap = map[string]string{\n+\t\"AUG\": \"Methionine\",\n+\t\"UUU\": \"Phenylalanine\",\n+\t\"UUC\": \"Phenylalanine\",\n+\t\"UUA\": \"Leucine\",\n+\t\"UUG\": \"Leucine\",\n+\t\"UCU\": \"Serine\",\n+\t\"UCC\": \"Serine\",\n+\t\"UCA\": \"Serine\",\n+\t\"UCG\": \"Serine\",\n+\t\"UAU\": \"Tyrosine\",\n+\t\"UAC\": \"Tyrosine\",\n+\t\"UGU\": \"Cysteine\",\n+\t\"UGC\": \"Cysteine\",\n+\t\"UGG\": \"Tryptophan\",\n+\t\"UAA\": \"STOP\",\n+\t\"UAG\": \"STOP\",\n+\t\"UGA\": \"STOP\",\n }\n \n+var ErrInvalidCodon = errors.New(\"invalid codon\")\n+\n+// FromCodon translates a single codon into a protein\n+// and returns an error if the codon is invalid.\n func FromCodon(codon string) (string, error) {\n-\tpanic(\"Please implement the FromCodon function\")\n+\tif protein, ok := codonMap[codon]; ok {\n+\t\treturn protein, nil\n+\t}\n+\treturn \"\", ErrInvalidCodon\n+}\n+\n+// FromRNA translates an RNA string into a slice of proteins.\n+// It stops translation if a stop codon is encountered.\n+func FromRNA(rna string) ([]string, error) {\n+\tvar proteins []string\n+\tfor i := 0; i+3 <= len(rna); i += 3 {\n+\t\tcodon := rna[i : i+3]\n+\t\tprotein, err := FromCodon(codon)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif protein == \"STOP\" {\n+\t\t\tbreak\n+\t\t}\n+\t\tproteins = append(proteins, protein)\n+\t}\n+\treturn proteins, nil\n }\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}