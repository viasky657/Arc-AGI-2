{
    "instance_id": "java__pythagorean-triplet",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/PythagoreanTriplet.java b/src/main/java/PythagoreanTriplet.java\nindex 30a3831..1f54158 100644\n--- a/src/main/java/PythagoreanTriplet.java\n+++ b/src/main/java/PythagoreanTriplet.java\n@@ -1,29 +1,78 @@\n import java.util.List;\n+import java.util.ArrayList;\n \n-class PythagoreanTriplet {\n+public class PythagoreanTriplet {\n \n-    PythagoreanTriplet(int a, int b, int c) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    private final int a;\n+    private final int b;\n+    private final int c;\n+\n+    public PythagoreanTriplet(int a, int b, int c) {\n+        // Ensure the invariant: a < b < c\n+        if (!(a < b && b < c)) {\n+            throw new IllegalArgumentException(\"Invalid triplet: must satisfy a < b < c\");\n+        }\n+        this.a = a;\n+        this.b = b;\n+        this.c = c;\n     }\n \n-    static TripletListBuilder makeTripletsList() {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    public int getA() {\n+        return a;\n     }\n \n-    static class TripletListBuilder {\n+    public int getB() {\n+        return b;\n+    }\n \n-        TripletListBuilder thatSumTo(int sum) {\n-            throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n-        }\n+    public int getC() {\n+        return c;\n+    }\n \n-        TripletListBuilder withFactorsLessThanOrEqualTo(int maxFactor) {\n-            throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n-        }\n+    public static TripletListBuilder makeTripletsList() {\n+        return new TripletListBuilder();\n+    }\n \n-        List<PythagoreanTriplet> build() {\n-            throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    public static class TripletListBuilder {\n+        private Integer sum = null;\n+        private Integer maxFactor = null;\n+        \n+        public TripletListBuilder thatSumTo(int sum) {\n+            this.sum = sum;\n+            return this;\n+        }\n+        \n+        public TripletListBuilder withFactorsLessThanOrEqualTo(int maxFactor) {\n+            this.maxFactor = maxFactor;\n+            return this;\n+        }\n+        \n+        public List<PythagoreanTriplet> build() {\n+            List<PythagoreanTriplet> result = new ArrayList<>();\n+            if(maxFactor == null) {\n+                throw new IllegalStateException(\"maxFactor must be set using withFactorsLessThanOrEqualTo\");\n+            }\n+            for (int a = 1; a <= maxFactor; a++) {\n+                for (int b = a + 1; b <= maxFactor; b++) {\n+                    double cDouble = Math.sqrt(a * a + b * b);\n+                    if (cDouble != Math.floor(cDouble)) {\n+                        continue;\n+                    }\n+                    int c = (int) cDouble;\n+                    if (c > maxFactor) {\n+                        continue; // c should be within the limit\n+                    }\n+                    // Ensure a < b < c\n+                    if (c <= b) {\n+                        continue;\n+                    }\n+                    if (sum != null && (a + b + c != sum)) {\n+                        continue;\n+                    }\n+                    result.add(new PythagoreanTriplet(a, b, c));\n+                }\n+            }\n+            return result;\n         }\n-\n     }\n-\n-}\n\\ No newline at end of file\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}