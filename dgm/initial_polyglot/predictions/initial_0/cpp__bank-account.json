{
    "instance_id": "cpp__bank-account",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/bank_account.cpp b/bank_account.cpp\nindex ac7a166..141cf74 100644\n--- a/bank_account.cpp\n+++ b/bank_account.cpp\n@@ -1,3 +1,60 @@\n #include \"bank_account.h\"\n+#include <stdexcept>\n \n-namespace Bankaccount {}\n\\ No newline at end of file\n+namespace Bankaccount {\n+\n+Bankaccount::Bankaccount() : is_open(false), balance(0) {}\n+\n+void Bankaccount::open() {\n+    std::lock_guard<std::mutex> lock(mtx);\n+    if (is_open) {\n+        throw std::runtime_error(\"Account already open\");\n+    }\n+    is_open = true;\n+    balance = 0;\n+}\n+\n+void Bankaccount::close() {\n+    std::lock_guard<std::mutex> lock(mtx);\n+    if (!is_open) {\n+        throw std::runtime_error(\"Account not open\");\n+    }\n+    is_open = false;\n+}\n+\n+int Bankaccount::get_balance() {\n+    std::lock_guard<std::mutex> lock(mtx);\n+    if (!is_open) {\n+        throw std::runtime_error(\"Account is closed\");\n+    }\n+    return balance;\n+}\n+\n+int Bankaccount::deposit(int amount) {\n+    std::lock_guard<std::mutex> lock(mtx);\n+    if (!is_open) {\n+        throw std::runtime_error(\"Account is closed\");\n+    }\n+    if (amount < 0) {\n+        throw std::runtime_error(\"Cannot deposit negative amount\");\n+    }\n+    balance += amount;\n+    return balance;\n+}\n+\n+int Bankaccount::withdraw(int amount) {\n+    std::lock_guard<std::mutex> lock(mtx);\n+    if (!is_open) {\n+        throw std::runtime_error(\"Account is closed\");\n+    }\n+    if (amount < 0) {\n+        throw std::runtime_error(\"Cannot withdraw negative amount\");\n+    }\n+    if (balance < amount) {\n+        throw std::runtime_error(\"Insufficient funds\");\n+    }\n+    balance -= amount;\n+    return balance;\n+}\n+\n+} // namespace Bankaccount\ndiff --git a/bank_account.h b/bank_account.h\nindex 048f65e..f3dc725 100644\n--- a/bank_account.h\n+++ b/bank_account.h\n@@ -1,9 +1,42 @@\n #if !defined(BANK_ACCOUNT_H)\n #define BANK_ACCOUNT_H\n \n+#include <mutex>\n+#include <stdexcept>\n+\n namespace Bankaccount {\n-class Bankaccount {};  // class Bankaccount\n \n-}  // namespace Bankaccount\n+class Bankaccount {\n+public:\n+    Bankaccount();\n+\n+    // Disable copying\n+    Bankaccount(const Bankaccount&) = delete;\n+    Bankaccount& operator=(const Bankaccount&) = delete;\n+\n+    // Opens an account. If the account is already open, throws an exception.\n+    void open();\n+\n+    // Closes an open account. If the account is not open, throws an exception.\n+    void close();\n+\n+    // Returns the current balance. If the account is closed, throws an exception.\n+    int get_balance();\n+\n+    // Deposits a positive amount into an open account and returns the new balance.\n+    // Throws if account is closed or if the amount is negative.\n+    int deposit(int amount);\n+\n+    // Withdraws a positive amount from an open account and returns the new balance.\n+    // Throws if account is closed, if the amount is negative, or if insufficient funds exist.\n+    int withdraw(int amount);\n+\n+private:\n+    std::mutex mtx;\n+    bool is_open;\n+    int balance;\n+};\n+\n+} // namespace Bankaccount\n \n-#endif  // BANK_ACCOUNT_H\n\\ No newline at end of file\n+#endif // BANK_ACCOUNT_H\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}