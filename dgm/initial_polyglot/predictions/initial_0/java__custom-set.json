{
    "instance_id": "java__custom-set",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/CustomSet.java b/src/main/java/CustomSet.java\nindex 7ec70e6..9874e4a 100644\n--- a/src/main/java/CustomSet.java\n+++ b/src/main/java/CustomSet.java\n@@ -1,48 +1,84 @@\n import java.util.Collection;\n+import java.util.HashSet;\n \n class CustomSet<T> {\n+    private HashSet<T> set;\n+\n+    // Creates an empty set\n     CustomSet() {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        set = new HashSet<>();\n     }\n \n+    // Creates a set with all unique elements from the collection\n     CustomSet(Collection<T> data) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        set = new HashSet<>(data);\n     }\n \n     boolean isEmpty() {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        return set.isEmpty();\n     }\n \n     boolean contains(T element) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        return set.contains(element);\n     }\n \n+    // Returns true if this set and the other set have no common elements\n     boolean isDisjoint(CustomSet<T> other) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        for (T element : set) {\n+            if (other.contains(element)) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n+    // Adds the element to the set if not already present. Returns true if the element was added.\n     boolean add(T element) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        return set.add(element);\n     }\n \n     @Override\n     public boolean equals(Object obj) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        if (this == obj)\n+            return true;\n+        if (obj == null || getClass() != obj.getClass())\n+            return false;\n+        CustomSet<?> other = (CustomSet<?>) obj;\n+        return this.set.equals(other.set);\n     }\n \n+    // Returns a new CustomSet which is the intersection of this set and the other set.\n     CustomSet<T> getIntersection(CustomSet<T> other) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        CustomSet<T> intersection = new CustomSet<>();\n+        for (T element : set) {\n+            if (other.contains(element)) {\n+                intersection.add(element);\n+            }\n+        }\n+        return intersection;\n     }\n \n+    // Returns a new CustomSet which is the union of this set and the other set.\n     CustomSet<T> getUnion(CustomSet<T> other) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        CustomSet<T> union = new CustomSet<>();\n+        union.set.addAll(this.set);\n+        union.set.addAll(other.set);\n+        return union;\n     }\n \n+    // Returns a new CustomSet which is the difference of this set and the other set (elements in this but not in other).\n     CustomSet<T> getDifference(CustomSet<T> other) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        CustomSet<T> difference = new CustomSet<>();\n+        for (T element : set) {\n+            if (!other.contains(element)) {\n+                difference.add(element);\n+            }\n+        }\n+        return difference;\n     }\n \n+    // Returns true if all elements of this set are contained in the other set\n     boolean isSubset(CustomSet<T> other) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        return other.set.containsAll(this.set);\n     }\n }\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}