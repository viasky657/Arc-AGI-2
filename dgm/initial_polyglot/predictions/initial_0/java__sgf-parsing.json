{
    "instance_id": "java__sgf-parsing",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/SgfParsing.java b/src/main/java/SgfParsing.java\nindex 4e475af..1b73746 100644\n--- a/src/main/java/SgfParsing.java\n+++ b/src/main/java/SgfParsing.java\n@@ -1,5 +1,171 @@\n+import java.util.*;\n+\n public class SgfParsing {\n     public SgfNode parse(String input) throws SgfParsingException {\n-        throw new UnsupportedOperationException(\"Please implement the SgfParsing.parse method.\");\n+        Parser parser = new Parser(input);\n+        SgfNode tree = parser.parseTree();\n+        if (parser.hasMore()) {\n+            throw new SgfParsingException(\"Extra data after parsing complete at position \" + parser.getPos());\n+        }\n+        return tree;\n+    }\n+\n+    private static class Parser {\n+        private final String input;\n+        private int pos;\n+\n+        public Parser(String input) {\n+            this.input = input;\n+            this.pos = 0;\n+        }\n+\n+        public boolean hasMore() {\n+            return pos < input.length();\n+        }\n+\n+        public int getPos() {\n+            return pos;\n+        }\n+\n+        private char current() throws SgfParsingException {\n+            if (!hasMore()) {\n+                throw new SgfParsingException(\"Unexpected end of input at position \" + pos);\n+            }\n+            return input.charAt(pos);\n+        }\n+\n+        private char next() throws SgfParsingException {\n+            if (!hasMore()) {\n+                throw new SgfParsingException(\"Unexpected end of input at position \" + pos);\n+            }\n+            return input.charAt(pos++);\n+        }\n+\n+        private void expect(char ch) throws SgfParsingException {\n+            if (!hasMore() || input.charAt(pos) != ch) {\n+                throw new SgfParsingException(\"Expected '\" + ch + \"' at position \" + pos);\n+            }\n+            pos++;\n+        }\n+\n+        public SgfNode parseTree() throws SgfParsingException {\n+            skipWhitespace();\n+            expect('(');\n+            \n+            // Parse a sequence of nodes. A sequence is one or more nodes starting with ';'.\n+            SgfNode first = null;\n+            SgfNode currentNode = null;\n+            while (hasMore() && current() == ';') {\n+                SgfNode node = parseNode();\n+                if (first == null) {\n+                    first = node;\n+                    currentNode = node;\n+                } else {\n+                    // chain the node sequentially: add as the only child of current node\n+                    currentNode.addChild(node);\n+                    currentNode = node;\n+                }\n+            }\n+\n+            if (first == null) {\n+                throw new SgfParsingException(\"Empty node sequence at position \" + pos);\n+            }\n+            \n+            // After the sequence, there may be variations, each starting with '('\n+            while (hasMore() && current() == '(') {\n+                SgfNode variation = parseTree();\n+                currentNode.addChild(variation);\n+            }\n+\n+            skipWhitespace();\n+            expect(')');\n+            return first;\n+        }\n+\n+        public SgfNode parseNode() throws SgfParsingException {\n+            skipWhitespace();\n+            expect(';');\n+            SgfNode node = new SgfNode();\n+            \n+            // Parse properties: key followed by one or more values\n+            while (hasMore()) {\n+                skipWhitespace();\n+                char ch = current();\n+                // Stop if we reach a character that indicates a new node or tree\n+                if (ch == ';' || ch == '(' || ch == ')') {\n+                    break;\n+                }\n+                String key = parseKey();\n+                \n+                // After key, must have at least one property value\n+                if (!hasMore() || current() != '[') {\n+                    throw new SgfParsingException(\"Expected '[' after property key at position \" + pos);\n+                }\n+                \n+                while (hasMore() && current() == '[') {\n+                    String value = parsePropValue();\n+                    node.addProperty(key, value);\n+                    skipWhitespace();\n+                }\n+            }\n+            \n+            return node;\n+        }\n+        \n+        private String parseKey() throws SgfParsingException {\n+            StringBuilder sb = new StringBuilder();\n+            while (hasMore()) {\n+                char ch = current();\n+                if (ch >= 'A' && ch <= 'Z') {\n+                    sb.append(ch);\n+                    pos++;\n+                } else {\n+                    break;\n+                }\n+            }\n+            if (sb.length() == 0) {\n+                throw new SgfParsingException(\"Expected property key at position \" + pos);\n+            }\n+            return sb.toString();\n+        }\n+\n+        private String parsePropValue() throws SgfParsingException {\n+            // Property value starts with '[' and ends with the matching ']'\n+            expect('[');\n+            StringBuilder sb = new StringBuilder();\n+            while (hasMore()) {\n+                char ch = next();\n+                if (ch == ']') {\n+                    return sb.toString();\n+                } else if (ch == '\\\\') {\n+                    if (!hasMore()) {\n+                        throw new SgfParsingException(\"Escape character at end of input at position \" + pos);\n+                    }\n+                    char nextCh = next();\n+                    if (nextCh == '\\n' || nextCh == '\\r') { // newline or carriage return\n+                        // Skip newline characters that come immediately after backslash\n+                        continue;\n+                    } else if (Character.isWhitespace(nextCh) && nextCh != '\\n') {\n+                        // Convert any non-newline whitespace to a space\n+                        sb.append(' ');\n+                    } else {\n+                        sb.append(nextCh);\n+                    }\n+                } else {\n+                    if (Character.isWhitespace(ch) && ch != '\\n') {\n+                        sb.append(' ');\n+                    } else {\n+                        sb.append(ch);\n+                    }\n+                }\n+            }\n+            throw new SgfParsingException(\"Unterminated property value starting at position \" + pos);\n+        }\n+        \n+        private void skipWhitespace() {\n+            while (hasMore() && Character.isWhitespace(input.charAt(pos))) {\n+                pos++;\n+            }\n+        }\n     }\n }\ndiff --git a/src/main/java/SgfNode.java b/src/main/java/SgfNode.java\nnew file mode 100644\nindex 0000000..882ca08\n--- /dev/null\n+++ b/src/main/java/SgfNode.java\n@@ -0,0 +1,34 @@\n+import java.util.*;\n+\n+public class SgfNode {\n+    private Map<String, List<String>> properties = new HashMap<>();\n+    private List<SgfNode> children = new ArrayList<>();\n+\n+    public SgfNode() {}\n+\n+    public void addProperty(String key, String value) {\n+        List<String> values = properties.get(key);\n+        if (values == null) {\n+            values = new ArrayList<>();\n+            properties.put(key, values);\n+        }\n+        values.add(value);\n+    }\n+\n+    public void addChild(SgfNode child) {\n+        children.add(child);\n+    }\n+\n+    public Map<String, List<String>> getProperties() {\n+        return properties;\n+    }\n+\n+    public List<SgfNode> getChildren() {\n+        return children;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"SgfNode{\" + \"properties=\" + properties + \", children=\" + children + '}';\n+    }\n+}\ndiff --git a/src/main/java/SgfParsingException.java b/src/main/java/SgfParsingException.java\nnew file mode 100644\nindex 0000000..4870d35\n--- /dev/null\n+++ b/src/main/java/SgfParsingException.java\n@@ -0,0 +1,9 @@\n+public class SgfParsingException extends Exception {\n+    public SgfParsingException(String message) {\n+        super(message);\n+    }\n+\n+    public SgfParsingException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}