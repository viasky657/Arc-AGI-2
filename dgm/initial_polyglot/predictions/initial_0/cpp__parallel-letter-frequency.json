{
    "instance_id": "cpp__parallel-letter-frequency",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/parallel_letter_frequency.cpp b/parallel_letter_frequency.cpp\nindex 464be29..3cfe30f 100644\n--- a/parallel_letter_frequency.cpp\n+++ b/parallel_letter_frequency.cpp\n@@ -1,5 +1,63 @@\n #include \"parallel_letter_frequency.h\"\n \n+#include <thread>\n+#include <vector>\n+#include <map>\n+#include <string>\n+#include <cctype>\n+\n namespace parallel_letter_frequency {\n \n+// This function counts the frequency of alphabetic characters (case-insensitive)\n+// across a list of texts using parallel computation via multiple threads.\n+std::map<char, int> frequency(const std::vector<std::string>& texts) {\n+    // Determine the number of threads to use\n+    unsigned int num_threads = std::thread::hardware_concurrency();\n+    if (num_threads == 0) {\n+        num_threads = 2; // fallback to 2 if hardware_concurrency returns 0\n+    }\n+\n+    std::vector<std::map<char, int>> local_maps(num_threads);\n+    std::vector<std::thread> threads;\n+\n+    // Worker lambda: Process texts from index 'start' to 'end' and store counts in local_maps[tid]\n+    auto work = [&](size_t start, size_t end, size_t tid) {\n+        for (size_t i = start; i < end; ++i) {\n+            for (char ch : texts[i]) {\n+                if (std::isalpha(static_cast<unsigned char>(ch))) {\n+                    char lower = std::tolower(static_cast<unsigned char>(ch));\n+                    local_maps[tid][lower]++;\n+                }\n+            }\n+        }\n+    };\n+\n+    size_t texts_count = texts.size();\n+    size_t block_size = texts_count / num_threads;\n+    size_t extra = texts_count % num_threads;\n+    size_t start = 0;\n+\n+    // Launch threads with partitioned work\n+    for (unsigned int t = 0; t < num_threads; ++t) {\n+        size_t end = start + block_size + (t < extra ? 1 : 0);\n+        threads.emplace_back(work, start, end, t);\n+        start = end;\n+    }\n+\n+    // Wait for all threads to finish\n+    for (auto &thread : threads) {\n+        thread.join();\n+    }\n+\n+    // Merge results from all threads into a single result map\n+    std::map<char, int> result;\n+    for (const auto &local_map : local_maps) {\n+        for (const auto &entry : local_map) {\n+            result[entry.first] += entry.second;\n+        }\n+    }\n+\n+    return result;\n }\n+\n+} // namespace parallel_letter_frequency\ndiff --git a/parallel_letter_frequency.h b/parallel_letter_frequency.h\nindex f2c4142..38d3003 100644\n--- a/parallel_letter_frequency.h\n+++ b/parallel_letter_frequency.h\n@@ -1,9 +1,15 @@\n-#if !defined(PARALLEL_LETTER_FREQUENCY_H)\n+#ifndef PARALLEL_LETTER_FREQUENCY_H\n #define PARALLEL_LETTER_FREQUENCY_H\n \n+#include <string>\n+#include <vector>\n+#include <map>\n+\n namespace parallel_letter_frequency {\n \n+    // Returns a map from letter to its frequency count (case insensitive) across the provided texts.\n+    std::map<char, int> frequency(const std::vector<std::string>& texts);\n+\n }\n \n #endif\n-\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}