{
    "instance_id": "cpp__binary-search-tree",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/binary_search_tree.h b/binary_search_tree.h\nindex 419cf9a..0039e22 100644\n--- a/binary_search_tree.h\n+++ b/binary_search_tree.h\n@@ -3,6 +3,68 @@\n \n namespace binary_search_tree {\n \n+// Node structure for the binary search tree\n+struct Node {\n+    int data;\n+    Node* left;\n+    Node* right;\n+    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n+};\n+\n+// BinarySearchTree class encapsulating the BST operations\n+class BinarySearchTree {\n+private:\n+    Node* root;\n+    \n+    // Helper recursive function to insert a node\n+    Node* insert(Node* node, int value) {\n+        if (!node) {\n+            return new Node(value);\n+        }\n+        if (value <= node->data) {\n+            node->left = insert(node->left, value);\n+        } else {\n+            node->right = insert(node->right, value);\n+        }\n+        return node;\n+    }\n+    \n+    // Helper recursive function to search for a value\n+    bool search(Node* node, int value) const {\n+        if (!node) return false;\n+        if (node->data == value) return true;\n+        if (value < node->data)\n+            return search(node->left, value);\n+        else\n+            return search(node->right, value);\n+    }\n+    \n+    // Helper function to free the nodes\n+    void destroyTree(Node* node) {\n+        if (node) {\n+            destroyTree(node->left);\n+            destroyTree(node->right);\n+            delete node;\n+        }\n+    }\n+\n+public:\n+    BinarySearchTree() : root(nullptr) {}\n+    ~BinarySearchTree() {\n+        destroyTree(root);\n+    }\n+\n+    // Public method to insert a value\n+    void insert(int value) {\n+        root = insert(root, value);\n+    }\n+\n+    // Public method to search for a value\n+    bool search(int value) const {\n+        return search(root, value);\n+    }\n+};\n+\n }  // namespace binary_search_tree\n \n-#endif // BINARY_SEARCH_TREE_H\n\\ No newline at end of file\n+#endif // BINARY_SEARCH_TREE_H\ndiff --git a/test/tests-main.cpp b/test/tests-main.cpp\nindex 0c7c351..7f73c19 100644\n--- a/test/tests-main.cpp\n+++ b/test/tests-main.cpp\n@@ -1,2 +1,31 @@\n #define CATCH_CONFIG_MAIN\n #include \"catch.hpp\"\n+#include \"binary_search_tree.h\"\n+\n+TEST_CASE(\"Binary Search Tree Insertion and Search\", \"[binary_search_tree]\") {\n+    binary_search_tree::BinarySearchTree bst;\n+\n+    // Initially, searching for any number should return false\n+    REQUIRE_FALSE(bst.search(10));\n+\n+    // Insert numbers into the BST\n+    bst.insert(4);\n+    bst.insert(2);\n+    bst.insert(6);\n+    bst.insert(3);\n+    bst.insert(1);\n+    bst.insert(5);\n+    bst.insert(7);\n+\n+    // Test search for numbers that exist in the tree\n+    REQUIRE(bst.search(4));\n+    REQUIRE(bst.search(2));\n+    REQUIRE(bst.search(6));\n+    REQUIRE(bst.search(3));\n+    REQUIRE(bst.search(1));\n+    REQUIRE(bst.search(5));\n+    REQUIRE(bst.search(7));\n+\n+    // Test search for a number not in the tree\n+    REQUIRE_FALSE(bst.search(8));\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}