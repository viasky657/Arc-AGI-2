{
    "instance_id": "python__bottle-song",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/bottle_song.py b/bottle_song.py\nindex 9a5e67f..4548baa 100644\n--- a/bottle_song.py\n+++ b/bottle_song.py\n@@ -1,2 +1,58 @@\n def recite(start, take=1):\n-    pass\n+    \"\"\"\n+    Recite verses of the 'Ten Green Bottles' song.\n+    Generates 'take' verses starting from 'start' bottles, counting down.\n+    Each verse is separated by a blank line.\n+    \"\"\"\n+    # Mapping from number to word\n+    number_words = {\n+        10: 'ten',\n+         9: 'nine',\n+         8: 'eight',\n+         7: 'seven',\n+         6: 'six',\n+         5: 'five',\n+         4: 'four',\n+         3: 'three',\n+         2: 'two',\n+         1: 'one',\n+         0: 'no'\n+    }\n+    \n+    verses = []\n+    # For each verse, from start down to start-take+1\n+    for n in range(start, start - take, -1):\n+        if n < 0:\n+            break\n+        # Current line, capitalize the number\n+        current_word = number_words[n].capitalize() if n in number_words else str(n)\n+        current_bottle = 'bottle' if n == 1 else 'bottles'\n+\n+        line1 = f\"{current_word} green {current_bottle} hanging on the wall,\"\n+        line2 = line1\n+        line3 = \"And if one green bottle should accidentally fall,\"\n+\n+        # Compute next value\n+        next_n = n - 1\n+        if next_n in number_words:\n+            next_word = number_words[next_n]\n+        else:\n+            next_word = str(next_n)\n+\n+        # Determine bottle pluralization for next_n\n+        if next_n == 1:\n+            next_bottle = 'bottle'\n+        else:\n+            next_bottle = 'bottles'\n+\n+        line4 = f\"There'll be {next_word} green {next_bottle} hanging on the wall.\"\n+\n+        verse = \"\\n\".join([line1, line2, line3, line4])\n+        verses.append(verse)\n+\n+    return \"\\n\\n\".join(verses)\n+\n+\n+# For quick testing, you can uncomment the following lines:\n+# if __name__ == '__main__':\n+#     print(recite(10, 10))\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}