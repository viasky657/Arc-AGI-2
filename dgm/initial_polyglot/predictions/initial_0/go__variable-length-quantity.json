{
    "instance_id": "go__variable-length-quantity",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/variable_length_quantity.go b/variable_length_quantity.go\nindex 2ddd432..ab78d7e 100644\n--- a/variable_length_quantity.go\n+++ b/variable_length_quantity.go\n@@ -1,9 +1,79 @@\n package variablelengthquantity\n \n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+)\n+\n+// EncodeVarint encodes a slice of uint32 into a VLQ byte sequence.\n func EncodeVarint(input []uint32) []byte {\n-\tpanic(\"Please implement the EncodeVarint function\")\n+\tvar result []byte\n+\n+\tfor _, num := range input {\n+\t\t// Special case for 0\n+\t\tif num == 0 {\n+\t\t\tresult = append(result, 0x00)\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\t// Collect 7-bit groups in reverse order (least significant group first)\n+\t\tvar groups []byte\n+\t\tn := num\n+\t\tfor n > 0 {\n+\t\t\tgroups = append(groups, byte(n&0x7F))\n+\t\t\tn >>= 7\n+\t\t}\n+\n+\t\t// Reverse the groups to have most significant first\n+\t\tfor i, j := 0, len(groups)-1; i < j; i, j = i+1, j-1 {\n+\t\t\tgroups[i], groups[j] = groups[j], groups[i]\n+\t\t}\n+\n+\t\t// Set the MSB (continuation bit) for all bytes except the last one\n+\t\tfor i := 0; i < len(groups)-1; i++ {\n+\t\t\tgroups[i] |= 0x80\n+\t\t}\n+\n+\t\tresult = append(result, groups...)\n+\t}\n+\n+\treturn result\n }\n \n+// DecodeVarint decodes a VLQ-encoded byte slice into a slice of uint32.\n+// It returns an error if the encoding is malformed or if a number overflows 32 bits.\n func DecodeVarint(input []byte) ([]uint32, error) {\n-\tpanic(\"Please implement the DecodeVarint function\")\n+\tvar result []uint32\n+\tvar current uint32 = 0\n+\tvar groupCount int = 0\n+\n+\tfor i, b := range input {\n+\t\t// Before shifting, check potential overflow: current << 7 should not overflow 32 bits.\n+\t\tif current > (0xFFFFFFFF >> 7) {\n+\t\t\treturn nil, fmt.Errorf(\"overflow detected at byte index %d\", i)\n+\t\t}\n+\n+\t\tcurrent = (current << 7) | uint32(b&0x7F)\n+\t\tgroupCount++\n+\n+\t\t// If continuation bit is not set, then this number is complete.\n+\t\tif b&0x80 == 0 {\n+\t\t\tresult = append(result, current)\n+\t\t\t// Reset for next number\n+\t\t\tcurrent = 0\n+\t\t\tgroupCount = 0\n+\t\t} else {\n+\t\t\t// According to VLQ encoding for a 32-bit number, at most 5 bytes are allowed\n+\t\t\tif groupCount >= 5 {\n+\t\t\t\treturn nil, errors.New(\"VLQ sequence is too long or overflows 32 bits\")\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t// If we finished reading but haven't closed the last number, it's an error\n+\tif groupCount != 0 {\n+\t\treturn nil, errors.New(\"incomplete VLQ sequence at end of input\")\n+\t}\n+\n+\treturn result, nil\n }\n",
    "proposed_model_patches": [],
    "eval_result": "resolved",
    "success": true
}