{
    "instance_id": "python__wordy",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/wordy.py b/wordy.py\nindex 6fdad1f..643c757 100644\n--- a/wordy.py\n+++ b/wordy.py\n@@ -1,2 +1,56 @@\n def answer(question):\n-    pass\n+    # Validate question format\n+    if not question.startswith(\"What is\") or not question.endswith(\"?\"):\n+        raise ValueError(\"syntax error\")\n+    \n+    # Remove the prefix 'What is' and the trailing '?'\n+    content = question[len(\"What is\"): -1].strip()\n+    if not content:\n+        raise ValueError(\"syntax error\")\n+\n+    # Replace multi-word operators with single tokens\n+    content = content.replace(\"multiplied by\", \"multiplied_by\")\n+    content = content.replace(\"divided by\", \"divided_by\")\n+\n+    tokens = content.split()\n+    \n+    # There should be at least one token (i.e., a number)\n+    if not tokens:\n+        raise ValueError(\"syntax error\")\n+\n+    try:\n+        # The first token must be an integer\n+        result = int(tokens[0])\n+    except Exception:\n+        raise ValueError(\"syntax error\")\n+\n+    # Process remaining tokens two at a time: operator and then a number\n+    i = 1\n+    while i < len(tokens):\n+        if i + 1 >= len(tokens):\n+            raise ValueError(\"syntax error\")\n+        op = tokens[i]\n+        try:\n+            num = int(tokens[i + 1])\n+        except Exception:\n+            raise ValueError(\"syntax error\")\n+\n+        if op == \"plus\":\n+            result += num\n+        elif op == \"minus\":\n+            result -= num\n+        elif op == \"multiplied_by\":\n+            result *= num\n+        elif op == \"divided_by\":\n+            # Using integer division as per examples\n+            result //= num\n+        else:\n+            raise ValueError(\"unknown operation\")\n+        \n+        i += 2\n+\n+    # If there are extraneous tokens, it's a syntax error\n+    if i != len(tokens):\n+        raise ValueError(\"syntax error\")\n+\n+    return result\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}