{
    "instance_id": "java__rest-api",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/RestApi.java b/src/main/java/RestApi.java\nindex 325f180..bd5d7a5 100644\n--- a/src/main/java/RestApi.java\n+++ b/src/main/java/RestApi.java\n@@ -1,21 +1,156 @@\n import org.json.JSONObject;\n+import org.json.JSONArray;\n+import java.util.*;\n \n class RestApi {\n \n-    RestApi(User... users) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    private Map<String, UserEntry> users;\n+\n+    RestApi(User... initialUsers) {\n+        users = new TreeMap<>(); // Maintain users sorted by name\n+        // Initialize from given users\n+        for (User u : initialUsers) {\n+            UserEntry ue = new UserEntry(u.name());\n+            // Populate owes\n+            for (Iou iou : u.owes()) {\n+                ue.owes.put(iou.getName(), iou.getAmount());\n+            }\n+            // Populate owed_by\n+            for (Iou iou : u.owedBy()) {\n+                ue.owedBy.put(iou.getName(), iou.getAmount());\n+            }\n+            users.put(ue.name, ue);\n+        }\n+    }\n+\n+    public String get(String url) {\n+        return get(url, new JSONObject());\n     }\n \n-    String get(String url) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    public String get(String url, JSONObject payload) {\n+        if(url.equals(\"/users\")){\n+            JSONArray resultArray = new JSONArray();\n+            List<String> userList;\n+            if(payload.has(\"users\")){\n+                // Filter users by names provided in payload\n+                userList = new ArrayList<>();\n+                JSONArray arr = payload.getJSONArray(\"users\");\n+                for(int i = 0; i < arr.length(); i++){\n+                    String uname = arr.getString(i);\n+                    if(users.containsKey(uname)){\n+                        userList.add(uname);\n+                    }\n+                }\n+                Collections.sort(userList);\n+            } else {\n+                userList = new ArrayList<>(users.keySet());\n+            }\n+            for(String uname : userList){\n+                resultArray.put(users.get(uname).toJSON());\n+            }\n+            JSONObject resp = new JSONObject();\n+            resp.put(\"users\", resultArray);\n+            return resp.toString();\n+        }\n+        return \"\";\n     }\n \n-    String get(String url, JSONObject payload) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    public String post(String url, JSONObject payload) {\n+        if(url.equals(\"/add\")){\n+            String userName = payload.getString(\"user\");\n+            if(!users.containsKey(userName)){\n+                users.put(userName, new UserEntry(userName));\n+            }\n+            return users.get(userName).toJSON().toString();\n+        } else if(url.equals(\"/iou\")){\n+            String lenderName = payload.getString(\"lender\");\n+            String borrowerName = payload.getString(\"borrower\");\n+            double amount = payload.getDouble(\"amount\");\n+            if(!users.containsKey(lenderName) || !users.containsKey(borrowerName)){\n+                // If either user doesn't exist, do nothing (spec not defined)\n+                return \"\";\n+            }\n+            UserEntry lender = users.get(lenderName);\n+            UserEntry borrower = users.get(borrowerName);\n+\n+            // Process IOU update\n+            // Case 1: Lender owes Borrower\n+            if(lender.owes.containsKey(borrowerName)){\n+                double current = lender.owes.get(borrowerName);\n+                if(amount > current){\n+                    double newAmount = amount - current;\n+                    lender.owes.remove(borrowerName);\n+                    borrower.owedBy.remove(lenderName);\n+                    lender.owedBy.put(borrowerName, lender.owedBy.getOrDefault(borrowerName, 0.0) + newAmount);\n+                    borrower.owes.put(lenderName, borrower.owes.getOrDefault(lenderName, 0.0) + newAmount);\n+                } else if(amount == current){\n+                    lender.owes.remove(borrowerName);\n+                    borrower.owedBy.remove(lenderName);\n+                } else { // amount < current\n+                    double newAmount = current - amount;\n+                    lender.owes.put(borrowerName, newAmount);\n+                    borrower.owedBy.put(lenderName, newAmount);\n+                }\n+            } else {\n+                // Case 2: Borrower owes Lender or no existing record\n+                if(lender.owedBy.containsKey(borrowerName)){\n+                    double newAmount = lender.owedBy.get(borrowerName) + amount;\n+                    lender.owedBy.put(borrowerName, newAmount);\n+                    borrower.owes.put(lenderName, newAmount);\n+                } else {\n+                    lender.owedBy.put(borrowerName, amount);\n+                    borrower.owes.put(lenderName, amount);\n+                }\n+            }\n+\n+            // Prepare response: return updated records for lender and borrower sorted by name\n+            JSONArray respArray = new JSONArray();\n+            List<String> names = new ArrayList<>();\n+            names.add(lenderName);\n+            names.add(borrowerName);\n+            Collections.sort(names);\n+            for(String n : names){\n+                respArray.put(users.get(n).toJSON());\n+            }\n+            JSONObject resp = new JSONObject();\n+            resp.put(\"users\", respArray);\n+            return resp.toString();\n+        }\n+        return \"\";\n     }\n \n-    String post(String url, JSONObject payload) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+    // Internal class representing a mutable user record\n+    private static class UserEntry {\n+        String name;\n+        Map<String, Double> owes;\n+        Map<String, Double> owedBy;\n+        \n+        UserEntry(String name) {\n+            this.name = name;\n+            this.owes = new TreeMap<>();\n+            this.owedBy = new TreeMap<>();\n+        }\n+        \n+        double balance() {\n+            double owedBySum = 0.0;\n+            for (double amt : owedBy.values()) {\n+                owedBySum += amt;\n+            }\n+            double owesSum = 0.0;\n+            for (double amt : owes.values()) {\n+                owesSum += amt;\n+            }\n+            return owedBySum - owesSum;\n+        }\n+        \n+        JSONObject toJSON() {\n+            JSONObject obj = new JSONObject();\n+            obj.put(\"name\", name);\n+            obj.put(\"owes\", new JSONObject(owes));\n+            obj.put(\"owed_by\", new JSONObject(owedBy));\n+            obj.put(\"balance\", balance());\n+            return obj;\n+        }\n     }\n \n-}\n\\ No newline at end of file\n+}\ndiff --git a/src/main/java/Iou.java b/src/main/java/Iou.java\nnew file mode 100644\nindex 0000000..2b7688c\n--- /dev/null\n+++ b/src/main/java/Iou.java\n@@ -0,0 +1,17 @@\n+public class Iou {\n+    private final String name;\n+    private final double amount;\n+    \n+    public Iou(String name, double amount) {\n+        this.name = name;\n+        this.amount = amount;\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public double getAmount() {\n+        return amount;\n+    }\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}