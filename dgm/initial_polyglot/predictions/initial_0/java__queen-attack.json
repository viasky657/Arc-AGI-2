{
    "instance_id": "java__queen-attack",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/Queen.java b/src/main/java/Queen.java\nindex 8cd04fb..c9ad8cc 100644\n--- a/src/main/java/Queen.java\n+++ b/src/main/java/Queen.java\n@@ -1,7 +1,22 @@\n class Queen {\n \n+    private final int row;\n+    private final int column;\n+\n     Queen(int row, int column) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        if (row < 0 || row > 7 || column < 0 || column > 7) {\n+            throw new IllegalArgumentException(\"Queen must be placed on a valid board position.\");\n+        }\n+        this.row = row;\n+        this.column = column;\n+    }\n+\n+    int getRow() {\n+        return row;\n+    }\n+\n+    int getColumn() {\n+        return column;\n     }\n \n }\ndiff --git a/src/main/java/QueenAttackCalculator.java b/src/main/java/QueenAttackCalculator.java\nindex b30a9d9..ace7634 100644\n--- a/src/main/java/QueenAttackCalculator.java\n+++ b/src/main/java/QueenAttackCalculator.java\n@@ -1,11 +1,36 @@\n class QueenAttackCalculator {\n \n+    private final Queen queen1;\n+    private final Queen queen2;\n+\n     QueenAttackCalculator(Queen queen1, Queen queen2) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        if (queen1 == null || queen2 == null) {\n+            throw new IllegalArgumentException(\"Queens must not be null.\");\n+        }\n+        // Queens cannot share the same space\n+        if (queen1.getRow() == queen2.getRow() && queen1.getColumn() == queen2.getColumn()) {\n+            throw new IllegalArgumentException(\"Queens cannot occupy the same position.\");\n+        }\n+        this.queen1 = queen1;\n+        this.queen2 = queen2;\n     }\n \n     boolean canQueensAttackOneAnother() {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        // Check if queens are on the same row\n+        if (queen1.getRow() == queen2.getRow()) {\n+            return true;\n+        }\n+        // Check if queens are on the same column\n+        if (queen1.getColumn() == queen2.getColumn()) {\n+            return true;\n+        }\n+        // Check if queens are on the same diagonal\n+        int rowDiff = Math.abs(queen1.getRow() - queen2.getRow());\n+        int colDiff = Math.abs(queen1.getColumn() - queen2.getColumn());\n+        if (rowDiff == colDiff) {\n+            return true;\n+        }\n+        return false;\n     }\n \n-}\n\\ No newline at end of file\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}