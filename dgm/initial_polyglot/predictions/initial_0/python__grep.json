{
    "instance_id": "python__grep",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/grep.py b/grep.py\nindex 3c8a8e1..fdba0b5 100644\n--- a/grep.py\n+++ b/grep.py\n@@ -1,2 +1,79 @@\n def grep(pattern, flags, files):\n-    pass\n+    results = []\n+    \n+    # Determine which flags are active\n+    flag_n = '-n' in flags   # Prepend line number\n+    flag_l = '-l' in flags   # Only list file names with at least one match\n+    flag_i = '-i' in flags   # Case insensitive matching\n+    flag_v = '-v' in flags   # Invert match\n+    flag_x = '-x' in flags   # Match entire line\n+    \n+    # Adjust pattern for case insensitive search\n+    pattern_cmp = pattern.lower() if flag_i else pattern\n+    \n+    multiple_files = len(files) > 1\n+    \n+    for file in files:\n+        try:\n+            with open(file, 'r') as f:\n+                lines = f.readlines()\n+        except Exception as e:\n+            # If file cannot be opened, skip it\n+            continue\n+        \n+        file_has_match = False\n+        \n+        for line_number, line in enumerate(lines, 1):\n+            # Remove trailing newline characters\n+            line_content = line.rstrip('\\n')\n+            cmp_line = line_content.lower() if flag_i else line_content\n+            \n+            # Determine if the line matches the search criteria\n+            if flag_x:\n+                match = (cmp_line == pattern_cmp)\n+            else:\n+                match = (pattern_cmp in cmp_line)\n+            \n+            # Invert match if -v flag is set\n+            if flag_v:\n+                match = not match\n+            \n+            if match:\n+                if flag_l:\n+                    results.append(file)\n+                    file_has_match = True\n+                    break  # Only need to output file name once\n+                else:\n+                    formatted_line = \"\"\n+                    if multiple_files:\n+                        formatted_line += file + \":\"\n+                    if flag_n:\n+                        formatted_line += str(line_number) + \":\"\n+                    formatted_line += line_content\n+                    results.append(formatted_line)\n+        # End for line\n+        \n+    return \"\\n\".join(results)\n+\n+\n+# For manual testing\n+if __name__ == '__main__':\n+    import sys\n+    # Example usage: python grep.py 'search_term' -n file1.txt file2.txt\n+    if len(sys.argv) < 3:\n+        print('Usage: grep.py <pattern> [flags] <file> [<file> ...]')\n+        sys.exit(1)\n+    \n+    pattern = sys.argv[1]\n+    # Flags may follow pattern until we find a file that exists.\n+    # This is a simple implementation: assume flags are given as separate arguments beginning with '-'\n+    flags = []\n+    files = []\n+    for arg in sys.argv[2:]:\n+        if arg.startswith('-') and not files:\n+            flags.append(arg)\n+        else:\n+            files.append(arg)\n+    \n+    output = grep(pattern, flags, files)\n+    print(output)\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}