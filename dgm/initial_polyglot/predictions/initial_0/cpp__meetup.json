{
    "instance_id": "cpp__meetup",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/meetup.cpp b/meetup.cpp\nindex 11d5857..45702c5 100644\n--- a/meetup.cpp\n+++ b/meetup.cpp\n@@ -1,5 +1,84 @@\n #include \"meetup.h\"\n+#include <stdexcept>\n \n namespace meetup {\n \n+    // Helper function to determine if a year is a leap year\n+    bool isLeapYear(int year) {\n+        return ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0)));\n+    }\n+\n+    // Helper function to get the number of days in a month\n+    int daysInMonth(int year, int month) {\n+        switch(month) {\n+            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n+                return 31;\n+            case 4: case 6: case 9: case 11:\n+                return 30;\n+            case 2:\n+                return isLeapYear(year) ? 29 : 28;\n+            default:\n+                throw std::domain_error(\"Invalid month\");\n+        }\n+    }\n+\n+    // Helper function to determine the day of the week for a given date using Tomohiko Sakamoto's algorithm\n+    // Returns: 0 = Sunday, 1 = Monday, ..., 6 = Saturday\n+    int weekday_of_date(int year, int month, int day) {\n+        static int t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};\n+        if (month < 3) {\n+            year -= 1;\n+        }\n+        int w = (year + year/4 - year/100 + year/400 + t[month - 1] + day) % 7;\n+        return w;\n+    }\n+\n+    Date meetup_day(int year, int month, DayOfWeek weekday, Schedule schedule) {\n+        int target_weekday = static_cast<int>(weekday);\n+        int dim = daysInMonth(year, month);\n+        Date result {year, month, 0};\n+\n+        if (schedule == Schedule::Teenth) {\n+            // The teenth days are 13 to 19\n+            for (int day = 13; day <= 19; ++day) {\n+                if (weekday_of_date(year, month, day) == target_weekday) {\n+                    result.day = day;\n+                    return result;\n+                }\n+            }\n+            throw std::domain_error(\"No teenth day found\");\n+        } else if (schedule == Schedule::Last) {\n+            // Start from the last day of the month and move backwards\n+            for (int day = dim; day >= 1; --day) {\n+                if (weekday_of_date(year, month, day) == target_weekday) {\n+                    result.day = day;\n+                    return result;\n+                }\n+            }\n+            throw std::domain_error(\"No last day found\");\n+        } else {\n+            // For First, Second, Third, Fourth schedules: count occurrences of the weekday\n+            int occurrence = 0;\n+            int target_occurrence = 0;\n+            switch(schedule) {\n+                case Schedule::First:  target_occurrence = 1; break;\n+                case Schedule::Second: target_occurrence = 2; break;\n+                case Schedule::Third:  target_occurrence = 3; break;\n+                case Schedule::Fourth: target_occurrence = 4; break;\n+                default:\n+                    throw std::domain_error(\"Invalid schedule\");\n+            }\n+            for (int day = 1; day <= dim; ++day) {\n+                if (weekday_of_date(year, month, day) == target_weekday) {\n+                    ++occurrence;\n+                    if (occurrence == target_occurrence) {\n+                        result.day = day;\n+                        return result;\n+                    }\n+                }\n+            }\n+            throw std::domain_error(\"No matching day found for the given schedule\");\n+        }\n+    }\n+\n }  // namespace meetup\ndiff --git a/meetup.h b/meetup.h\nindex 939b108..21e2fd1 100644\n--- a/meetup.h\n+++ b/meetup.h\n@@ -1,8 +1,41 @@\n #if !defined(MEETUP_H)\n #define MEETUP_H\n \n+#include <stdexcept>\n+\n namespace meetup {\n \n+    // Enumeration for the days of the week. Sunday is 0, Monday is 1, ..., Saturday is 6.\n+    enum class DayOfWeek {\n+        Sunday = 0,\n+        Monday,\n+        Tuesday,\n+        Wednesday,\n+        Thursday,\n+        Friday,\n+        Saturday\n+    };\n+\n+    // Enumeration for scheduling options\n+    enum class Schedule {\n+        First,\n+        Second,\n+        Third,\n+        Fourth,\n+        Last,\n+        Teenth\n+    };\n+\n+    // Date structure\n+    struct Date {\n+        int year;\n+        int month;\n+        int day;\n+    };\n+\n+    // Returns the meetup day for the given parameters\n+    Date meetup_day(int year, int month, DayOfWeek weekday, Schedule schedule);\n+\n }  // namespace meetup\n \n-#endif // MEETUP_H\n\\ No newline at end of file\n+#endif // MEETUP_H\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}