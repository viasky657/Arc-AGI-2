{
    "instance_id": "javascript__zebra-puzzle",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/zebra-puzzle.js b/zebra-puzzle.js\nindex ff5a948..7f4ce4b 100644\n--- a/zebra-puzzle.js\n+++ b/zebra-puzzle.js\n@@ -5,14 +5,188 @@\n \n export class ZebraPuzzle {\n   constructor() {\n-    throw new Error('Remove this statement and implement this function');\n+    // Solve the puzzle once and cache the solution\n+    this.solution = this.solvePuzzle();\n   }\n \n   waterDrinker() {\n-    throw new Error('Remove this statement and implement this function');\n+    return this.solution.water;\n   }\n \n   zebraOwner() {\n-    throw new Error('Remove this statement and implement this function');\n+    return this.solution.zebra;\n+  }\n+\n+  // Helper method to solve the zebra puzzle using backtracking\n+  solvePuzzle() {\n+    const nats = [\"Englishman\", \"Spaniard\", \"Ukrainian\", \"Norwegian\", \"Japanese\"];\n+    const colors = [\"red\", \"green\", \"ivory\", \"yellow\", \"blue\"];\n+    const pets = [\"dog\", \"snail\", \"fox\", \"horse\", \"zebra\"];\n+    const drinks = [\"coffee\", \"tea\", \"milk\", \"orange juice\", \"water\"];\n+    const hobbies = [\"dancing\", \"painting\", \"reading\", \"football\", \"chess\"];\n+\n+    let solution = null;\n+    let houses = [];\n+\n+    // Check partial constraints that involve only assigned houses\n+    const validPartial = (houses) => {\n+      for (let i = 0; i < houses.length; i++) {\n+        const house = houses[i];\n+        // Constraint 10: The Norwegian lives in the first house (house 0)\n+        if (i === 0 && house.nationality && house.nationality !== \"Norwegian\") return false;\n+        // Constraint 9: The middle house (house 3 i.e., index 2) drinks milk\n+        if (i === 2 && house.drink && house.drink !== \"milk\") return false;\n+\n+        // Constraint 2: The Englishman lives in the red house.\n+        if (house.nationality === \"Englishman\" && house.color && house.color !== \"red\") return false;\n+        // Constraint 3: The Spaniard owns the dog.\n+        if (house.nationality === \"Spaniard\" && house.pet && house.pet !== \"dog\") return false;\n+        // Constraint 4: The green house drinks coffee.\n+        if (house.color === \"green\" && house.drink && house.drink !== \"coffee\") return false;\n+        // Constraint 5: The Ukrainian drinks tea.\n+        if (house.nationality === \"Ukrainian\" && house.drink && house.drink !== \"tea\") return false;\n+        // Constraint 7: The snail owner likes dancing.\n+        if (house.pet === \"snail\" && house.hobby && house.hobby !== \"dancing\") return false;\n+        // Constraint 8: The person in the yellow house is a painter.\n+        if (house.color === \"yellow\" && house.hobby && house.hobby !== \"painting\") return false;\n+        // Constraint 13: The person who plays football drinks orange juice.\n+        if (house.hobby === \"football\" && house.drink && house.drink !== \"orange juice\") return false;\n+        // Constraint 14: The Japanese person plays chess.\n+        if (house.nationality === \"Japanese\" && house.hobby && house.hobby !== \"chess\") return false;\n+      }\n+\n+      // Check neighbor-related constraints for houses already placed\n+      for (let i = 0; i < houses.length; i++) {\n+        const house = houses[i];\n+        // Constraint 6: The green house is immediately to the right of the ivory house.\n+        if (house.color === \"green\" && i > 0) {\n+          if (houses[i - 1].color && houses[i - 1].color !== \"ivory\") return false;\n+        }\n+        if (house.color === \"ivory\" && i < houses.length - 1) {\n+          if (houses[i + 1].color && houses[i + 1].color !== \"green\") return false;\n+        }\n+\n+        // Constraint 11: The person who enjoys reading lives in the house next to the person with the fox.\n+        if (house.hobby === \"reading\") {\n+          let hasFoxNeighbor = false;\n+          if (i > 0 && houses[i - 1].pet === \"fox\") hasFoxNeighbor = true;\n+          if (i < houses.length - 1 && houses[i + 1].pet === \"fox\") hasFoxNeighbor = true;\n+          // Only enforce if at least one neighbor has a pet assigned\n+          if (((i > 0 && houses[i - 1].pet) || (i < houses.length - 1 && houses[i + 1].pet)) && !hasFoxNeighbor) {\n+            return false;\n+          }\n+        }\n+\n+        // Constraint 12: The painter's house is next to the house with the horse.\n+        if (house.hobby === \"painting\") {\n+          let hasHorseNeighbor = false;\n+          if (i > 0 && houses[i - 1].pet === \"horse\") hasHorseNeighbor = true;\n+          if (i < houses.length - 1 && houses[i + 1].pet === \"horse\") hasHorseNeighbor = true;\n+          if (((i > 0 && houses[i - 1].pet) || (i < houses.length - 1 && houses[i + 1].pet)) && !hasHorseNeighbor) {\n+            return false;\n+          }\n+        }\n+\n+        // Constraint 15: The Norwegian lives next to the blue house.\n+        if (house.nationality === \"Norwegian\") {\n+          let hasBlueNeighbor = false;\n+          if (i > 0 && houses[i - 1].color === \"blue\") hasBlueNeighbor = true;\n+          if (i < houses.length - 1 && houses[i + 1].color === \"blue\") hasBlueNeighbor = true;\n+          if (((i > 0 && houses[i - 1].color) || (i < houses.length - 1 && houses[i + 1].color)) && !hasBlueNeighbor) {\n+            return false;\n+          }\n+        }\n+      }\n+      return true;\n+    };\n+\n+    const validComplete = (houses) => {\n+      // With a complete assignment, enforce all neighbor constraints strictly\n+      for (let i = 0; i < 5; i++) {\n+        const house = houses[i];\n+        // Constraint 6\n+        if (house.color === \"ivory\" && i < 4) {\n+          if (houses[i + 1].color !== \"green\") return false;\n+        }\n+        if (house.color === \"green\" && i > 0) {\n+          if (houses[i - 1].color !== \"ivory\") return false;\n+        }\n+        // Constraint 11\n+        if (house.hobby === \"reading\") {\n+          let neighborFox = false;\n+          if (i > 0 && houses[i - 1].pet === \"fox\") neighborFox = true;\n+          if (i < 4 && houses[i + 1].pet === \"fox\") neighborFox = true;\n+          if (!neighborFox) return false;\n+        }\n+        // Constraint 12\n+        if (house.hobby === \"painting\") {\n+          let neighborHorse = false;\n+          if (i > 0 && houses[i - 1].pet === \"horse\") neighborHorse = true;\n+          if (i < 4 && houses[i + 1].pet === \"horse\") neighborHorse = true;\n+          if (!neighborHorse) return false;\n+        }\n+        // Constraint 15\n+        if (house.nationality === \"Norwegian\") {\n+          let neighborBlue = false;\n+          if (i > 0 && houses[i - 1].color === \"blue\") neighborBlue = true;\n+          if (i < 4 && houses[i + 1].color === \"blue\") neighborBlue = true;\n+          if (!neighborBlue) return false;\n+        }\n+      }\n+      return true;\n+    };\n+\n+    const search = (i, natsLeft, colorsLeft, petsLeft, drinksLeft, hobbiesLeft, houses) => {\n+      if (i === 5) {\n+        // All houses assigned, check complete constraints\n+        if (validComplete(houses)) {\n+          solution = houses.map(h => ({ ...h }));\n+          return true;\n+        }\n+        return false;\n+      }\n+      \n+      for (let nat of natsLeft) {\n+        // Constraint 10: First house must be Norwegian\n+        if (i === 0 && nat !== \"Norwegian\") continue;\n+        \n+        for (let color of colorsLeft) {\n+          for (let pet of petsLeft) {\n+            for (let drink of drinksLeft) {\n+              // Constraint 9: Middle house drinks milk\n+              if (i === 2 && drink !== \"milk\") continue;\n+              \n+              for (let hobby of hobbiesLeft) {\n+                const house = { nationality: nat, color: color, pet: pet, drink: drink, hobby: hobby };\n+                houses.push(house);\n+                if (validPartial(houses)) {\n+                  if (search(i + 1,\n+                             natsLeft.filter(x => x !== nat),\n+                             colorsLeft.filter(x => x !== color),\n+                             petsLeft.filter(x => x !== pet),\n+                             drinksLeft.filter(x => x !== drink),\n+                             hobbiesLeft.filter(x => x !== hobby),\n+                             houses)) {\n+                    return true;\n+                  }\n+                }\n+                houses.pop();\n+              }\n+            }\n+          }\n+        }\n+      }\n+      return false;\n+    };\n+\n+    search(0, nats, colors, pets, drinks, hobbies, houses);\n+\n+    let waterDrinker = null;\n+    let zebraOwner = null;\n+    for (let house of solution) {\n+      if (house.drink === \"water\") waterDrinker = house.nationality;\n+      if (house.pet === \"zebra\") zebraOwner = house.nationality;\n+    }\n+    return { water: waterDrinker, zebra: zebraOwner };\n   }\n }\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}