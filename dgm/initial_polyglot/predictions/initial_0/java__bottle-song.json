{
    "instance_id": "java__bottle-song",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/BottleSong.java b/src/main/java/BottleSong.java\nindex 77397ee..e186d6c 100644\n--- a/src/main/java/BottleSong.java\n+++ b/src/main/java/BottleSong.java\n@@ -1,7 +1,59 @@\n class BottleSong {\n \n     String recite(int startBottles, int takeDown) {\n-        throw new UnsupportedOperationException(\"Delete this statement and write your own implementation.\");\n+        StringBuilder song = new StringBuilder();\n+        for (int i = 0; i < takeDown; i++) {\n+            int current = startBottles - i;\n+            int remaining = current - 1;\n+            // First two lines: use singular if current == 1\n+            String currentStr = numberWord(current, true);\n+            String bottleWordCurrent = (current == 1) ? \"green bottle\" : \"green bottles\";\n+            // Construct verse lines\n+            String line1 = currentStr + \" \" + bottleWordCurrent + \" hanging on the wall,\";\n+            String line2 = line1;\n+            String line3 = \"And if one green bottle should accidentally fall,\";\n+            String remainingStr;\n+            if (remaining == 0) {\n+                remainingStr = \"no green bottles\";\n+            } else {\n+                remainingStr = numberWord(remaining, false) + \" \" + (remaining == 1 ? \"green bottle\" : \"green bottles\");\n+            }\n+            String line4 = \"There'll be \" + remainingStr + \" hanging on the wall.\";\n+            // Append verse\n+            song.append(line1).append(\"\\n\")\n+                .append(line2).append(\"\\n\")\n+                .append(line3).append(\"\\n\")\n+                .append(line4);\n+            if (i < takeDown - 1) {\n+                song.append(\"\\n\\n\");\n+            }\n+        }\n+        return song.toString();\n     }\n \n-}\n\\ No newline at end of file\n+    // Helper method to convert numbers to words up to 10.\n+    // If capitalize is true, then first letter is uppercase, else lowercase.\n+    private String numberWord(int number, boolean capitalize) {\n+        String word;\n+        switch (number) {\n+            case 10: word = \"ten\"; break;\n+            case 9: word = \"nine\"; break;\n+            case 8: word = \"eight\"; break;\n+            case 7: word = \"seven\"; break;\n+            case 6: word = \"six\"; break;\n+            case 5: word = \"five\"; break;\n+            case 4: word = \"four\"; break;\n+            case 3: word = \"three\"; break;\n+            case 2: word = \"two\"; break;\n+            case 1: word = \"one\"; break;\n+            case 0: word = \"no\"; break;\n+            default: word = Integer.toString(number);\n+        }\n+        if (capitalize) {\n+            return word.substring(0, 1).toUpperCase() + word.substring(1);\n+        } else {\n+            return word;\n+        }\n+    }\n+\n+}\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}