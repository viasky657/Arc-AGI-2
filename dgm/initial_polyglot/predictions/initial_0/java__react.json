{
    "instance_id": "java__react",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/src/main/java/React.java b/src/main/java/React.java\nindex a5735c0..026dfa2 100644\n--- a/src/main/java/React.java\n+++ b/src/main/java/React.java\n@@ -1,36 +1,98 @@\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n public class React {\n \n     public static class Cell<T> {\n+        protected T value;\n+        protected List<ComputeCell<T>> subscribers = new ArrayList<>();\n+        \n         public T getValue() {\n-            throw new UnsupportedOperationException(\"Please implement the Cell.getValue() method\");\n+            return value;\n+        }\n+        \n+        protected void addSubscriber(ComputeCell<T> cell) {\n+            subscribers.add(cell);\n+        }\n+        \n+        protected void notifySubscribers() {\n+            // Create a copy to avoid concurrent modifications if subscribers update the list\n+            List<ComputeCell<T>> subs = new ArrayList<>(subscribers);\n+            for (ComputeCell<T> s : subs) {\n+                s.recalculate();\n+            }\n         }\n     }\n \n     public static class InputCell<T> extends Cell<T> {\n+        public InputCell(T initialValue) {\n+            this.value = initialValue;\n+        }\n+        \n         public void setValue(T newValue) {\n-            throw new UnsupportedOperationException(\"Please implement the InputCell.setValue() method\");\n+            if (!Objects.equals(value, newValue)) {\n+                value = newValue;\n+                notifySubscribers();\n+            }\n         }\n     }\n \n     public static class ComputeCell<T> extends Cell<T> {\n+        private Function<List<T>, T> computeFn;\n+        private List<Cell<T>> dependencies;\n+        private List<Consumer<T>> callbacks = new ArrayList<>();\n+        \n+        public ComputeCell(Function<List<T>, T> fn, List<Cell<T>> deps) {\n+            this.computeFn = fn;\n+            this.dependencies = deps;\n+            this.value = computeFn.apply(getDependenciesValues());\n+            \n+            // Register this compute cell as a subscriber to each dependency\n+            for (Cell<T> cell : deps) {\n+                cell.addSubscriber(this);\n+            }\n+        }\n+        \n+        private List<T> getDependenciesValues() {\n+            List<T> vals = new ArrayList<>();\n+            for (Cell<T> cell : dependencies) {\n+                vals.add(cell.getValue());\n+            }\n+            return vals;\n+        }\n+        \n+        protected void recalculate() {\n+            T oldValue = value;\n+            T newValue = computeFn.apply(getDependenciesValues());\n+            if (!Objects.equals(oldValue, newValue)) {\n+                value = newValue;\n+                // Notify callbacks\n+                for (Consumer<T> callback : callbacks) {\n+                    callback.accept(newValue);\n+                }\n+                // Propagate the change to any subscribers\n+                notifySubscribers();\n+            }\n+        }\n+        \n         public void addCallback(Consumer<T> callback) {\n-            throw new UnsupportedOperationException(\"Please implement the ComputeCell.addCallback() method\");\n+            callbacks.add(callback);\n         }\n \n         public void removeCallback(Consumer<T> callback) {\n-            throw new UnsupportedOperationException(\"Please implement the ComputeCell.removeCallback() method\");\n+            callbacks.remove(callback);\n         }\n     }\n \n     public static <T> InputCell<T> inputCell(T initialValue) {\n-        throw new UnsupportedOperationException(\"Please implement the React.inputCell() method\");\n+        return new InputCell<>(initialValue);\n     }\n \n     public static <T> ComputeCell<T> computeCell(Function<List<T>, T> function, List<Cell<T>> cells) {\n-        throw new UnsupportedOperationException(\"Please implement the React.computeCell() method\");\n+        return new ComputeCell<>(function, cells);\n     }\n+\n }\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}