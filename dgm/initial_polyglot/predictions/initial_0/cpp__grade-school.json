{
    "instance_id": "cpp__grade-school",
    "model_name_or_path": "20250510_021328--claude-3-5-sonnet-20241022_0",
    "model_patch": "diff --git a/grade_school.cpp b/grade_school.cpp\nindex 106540f..6fd472e 100644\n--- a/grade_school.cpp\n+++ b/grade_school.cpp\n@@ -1,5 +1,43 @@\n #include \"grade_school.h\"\n+#include <algorithm>\n+#include <stdexcept>\n+#include <map>\n \n namespace grade_school {\n \n+void school::add(const std::string &student, int grade) {\n+    // Check across all grades if the student already exists\n+    for (const auto &entry : grade_students) {\n+        const std::vector<std::string> &students = entry.second;\n+        if (std::find(students.begin(), students.end(), student) != students.end()) {\n+            throw std::invalid_argument(\"Student already exists in the roster\");\n+        }\n+    }\n+    \n+    // Add the student to the appropriate grade\n+    std::vector<std::string> &students = grade_students[grade];\n+    students.push_back(student);\n+    // Keep the students sorted alphabetically within the grade\n+    std::sort(students.begin(), students.end());\n+}\n+\n+std::vector<std::string> school::grade(int grade) const {\n+    auto it = grade_students.find(grade);\n+    if (it != grade_students.end()) {\n+        return it->second; // Already sorted\n+    } else {\n+        return {};\n+    }\n+}\n+\n+std::vector<std::string> school::roster() const {\n+    std::vector<std::string> all_students;\n+    // Since grade_students is a std::map, keys are sorted in ascending order\n+    for (const auto &entry : grade_students) {\n+        // Append the (already alphabetically sorted) students to the roster\n+        all_students.insert(all_students.end(), entry.second.begin(), entry.second.end());\n+    }\n+    return all_students;\n+}\n+\n }  // namespace grade_school\ndiff --git a/grade_school.h b/grade_school.h\nindex 73dd9ac..b482091 100644\n--- a/grade_school.h\n+++ b/grade_school.h\n@@ -1,8 +1,31 @@\n-#if !defined(GRADE_SCHOOL_H)\n+#ifndef GRADE_SCHOOL_H\n #define GRADE_SCHOOL_H\n \n+#include <vector>\n+#include <string>\n+#include <map>\n+#include <stdexcept>\n+#include <algorithm>\n+\n namespace grade_school {\n \n-}  // namespace grade_school\n+class school {\n+public:\n+    // Add a student to a given grade\n+    // Throws std::invalid_argument if the student already exists in any grade.\n+    void add(const std::string &student, int grade);\n+\n+    // Return a sorted list of students enrolled in a specific grade\n+    std::vector<std::string> grade(int grade) const;\n+\n+    // Return a sorted list of all students in all grades\n+    std::vector<std::string> roster() const;\n+\n+private:\n+    // Map from grade to sorted list of students in that grade\n+    std::map<int, std::vector<std::string>> grade_students;\n+};\n+\n+} // namespace grade_school\n \n-#endif // GRADE_SCHOOL_H\n\\ No newline at end of file\n+#endif // GRADE_SCHOOL_H\n",
    "proposed_model_patches": [],
    "eval_result": "unresolved",
    "success": true
}