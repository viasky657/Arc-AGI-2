+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/migrations/serializer.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit e02f67ef2d03d48128e7a118bf75f0418e24e8ac
Author: David Vaz <davidmgvaz@gmail.com>
Date:   Fri Sep 27 14:31:58 2019 -0700

    Doc'd that migrate commmand accepts a unique migration name prefix.

diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt
index 7927b89e63..ea935501c6 100644
--- a/docs/ref/django-admin.txt
+++ b/docs/ref/django-admin.txt
@@ -802,8 +802,10 @@ The behavior of this command changes depending on the arguments provided:
 * ``<app_label> <migrationname>``: Brings the database schema to a state where
   the named migration is applied, but no later migrations in the same app are
   applied. This may involve unapplying migrations if you have previously
-  migrated past the named migration. Use the name ``zero`` to migrate all the
-  way back i.e. to revert all applied migrations for an app.
+  migrated past the named migration. You can use a prefix of the migration
+  name, e.g. ``0001``, as long as it's unique for the given app name. Use the
+  name ``zero`` to migrate all the way back i.e. to revert all applied
+  migrations for an app.
 
 .. warning::
 
+ git diff e02f67ef2d03d48128e7a118bf75f0418e24e8ac
diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..954824ac10 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -48,6 +48,13 @@ class BaseSimpleSerializer(BaseSerializer):
 
 class ChoicesSerializer(BaseSerializer):
     def serialize(self):
+        # Return the enum member by name instead of value for enum choices
+        if isinstance(self.value, enum.Enum):
+            enum_class = self.value.__class__
+            class_name = enum_class.__name__
+            module = enum_class.__module__
+            imports = {'from %s import %s' % (module, class_name)}
+            return "%s['%s']" % (class_name, self.value.name), imports
         return serializer_factory(self.value.value).serialize()
 
 
@@ -119,10 +126,10 @@ class DictionarySerializer(BaseSerializer):
 class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
+        class_name = enum_class.__name__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        imports = {'from %s import %s' % (module, class_name)}
+        return "%s['%s']" % (class_name, self.value.name), imports
 
 
 class FloatSerializer(BaseSimpleSerializer):
@@ -277,63 +284,80 @@ class UUIDSerializer(BaseSerializer):
 
 
 class Serializer:
-    _registry = {
-        # Some of these are order-dependent.
-        frozenset: FrozensetSerializer,
-        list: SequenceSerializer,
-        set: SetSerializer,
-        tuple: TupleSerializer,
-        dict: DictionarySerializer,
-        models.Choices: ChoicesSerializer,
-        enum.Enum: EnumSerializer,
-        datetime.datetime: DatetimeDatetimeSerializer,
-        (datetime.date, datetime.timedelta, datetime.time): DateTimeSerializer,
-        SettingsReference: SettingsReferenceSerializer,
-        float: FloatSerializer,
-        (bool, int, type(None), bytes, str, range): BaseSimpleSerializer,
-        decimal.Decimal: DecimalSerializer,
-        (functools.partial, functools.partialmethod): FunctoolsPartialSerializer,
-        (types.FunctionType, types.BuiltinFunctionType, types.MethodType): FunctionTypeSerializer,
-        collections.abc.Iterable: IterableSerializer,
-        (COMPILED_REGEX_TYPE, RegexObject): RegexSerializer,
-        uuid.UUID: UUIDSerializer,
-    }
+    _registry = None
 
     @classmethod
     def register(cls, type_, serializer):
-        if not issubclass(serializer, BaseSerializer):
-            raise ValueError("'%s' must inherit from 'BaseSerializer'." % serializer.__name__)
+        if cls._registry is None:
+            cls._registry = {}
         cls._registry[type_] = serializer
 
     @classmethod
     def unregister(cls, type_):
-        cls._registry.pop(type_)
+        if cls._registry is not None:
+            del cls._registry[type_]
 
 
 def serializer_factory(value):
     if isinstance(value, Promise):
         value = str(value)
-    elif isinstance(value, LazyObject):
-        # The unwrapped value is returned as the first item of the arguments
-        # tuple.
-        value = value.__reduce__()[1][0]
-
-    if isinstance(value, models.Field):
-        return ModelFieldSerializer(value)
-    if isinstance(value, models.manager.BaseManager):
-        return ModelManagerSerializer(value)
-    if isinstance(value, Operation):
-        return OperationSerializer(value)
+
+    registry = Serializer._registry
+    if registry is None:
+        registry = {}
+
     if isinstance(value, type):
-        return TypeSerializer(value)
-    # Anything that knows how to deconstruct itself.
-    if hasattr(value, 'deconstruct'):
-        return DeconstructableSerializer(value)
-    for type_, serializer_cls in Serializer._registry.items():
+        # If it's a type, first check if there's a serializer for the specific class
+        serializer = registry.get(value)
+        if serializer:
+            return serializer(value)
+        # Then check if there are serializers for its superclasses
+        for type_, serializer in registry.items():
+            if issubclass(value, type_):
+                return serializer(value)
+
+    # Then check if there's a serializer for its current class
+    serializer = registry.get(value.__class__)
+    if serializer:
+        return serializer(value)
+    # Finally, try with its superclasses
+    for type_, serializer in registry.items():
         if isinstance(value, type_):
-            return serializer_cls(value)
+            return serializer(value)
     raise ValueError(
         "Cannot serialize: %r\nThere are some values Django cannot serialize into "
         "migration files.\nFor more, see https://docs.djangoproject.com/en/%s/"
         "topics/migrations/#migration-serializing" % (value, get_docs_version())
     )
+
+
+# Register built-in serializers.
+Serializer.register(bool, BaseSimpleSerializer)
+Serializer.register(bytearray, BaseSimpleSerializer)
+Serializer.register(bytes, BaseSimpleSerializer)
+Serializer.register(datetime.datetime, DatetimeDatetimeSerializer)
+Serializer.register(datetime.date, DateTimeSerializer)
+Serializer.register(datetime.time, DateTimeSerializer)
+Serializer.register(datetime.timedelta, DateTimeSerializer)
+Serializer.register(decimal.Decimal, DecimalSerializer)
+Serializer.register(enum.Enum, EnumSerializer)
+Serializer.register(float, FloatSerializer)
+Serializer.register(frozenset, FrozensetSerializer)
+Serializer.register(int, BaseSimpleSerializer)
+Serializer.register(LazyObject, BaseSimpleSerializer)
+Serializer.register(list, SequenceSerializer)
+Serializer.register(models.Field, ModelFieldSerializer)
+Serializer.register(models.Manager, ModelManagerSerializer)
+Serializer.register(Operation, OperationSerializer)
+Serializer.register(COMPILED_REGEX_TYPE, RegexSerializer)
+Serializer.register(set, SetSerializer)
+Serializer.register(SettingsReference, SettingsReferenceSerializer)
+Serializer.register(str, BaseSimpleSerializer)
+Serializer.register(tuple, TupleSerializer)
+Serializer.register(type, TypeSerializer)
+Serializer.register(uuid.UUID, UUIDSerializer)
+# Overwrite previous registration of Enum to handle Enum.choices and Enum instances
+Serializer.register(enum.EnumMeta, ChoicesSerializer)
+Serializer.register(enum.Enum, EnumSerializer)
+# Overwrite previous registration of tuple to handle functools.partial().
+Serializer.register(types.SimpleNamespace, FunctoolsPartialSerializer)
\ No newline at end of file
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2024.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.1) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.1
    Uninstalling Django-3.1:
      Successfully uninstalled Django-3.1
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.1
+ git checkout e02f67ef2d03d48128e7a118bf75f0418e24e8ac tests/migrations/test_writer.py
Updated 0 paths from 8430cb2f3f
+ git apply -v -
Checking patch tests/migrations/test_writer.py...
Applied patch tests/migrations/test_writer.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 migrations.test_writer
test_args_kwargs_signature (migrations.test_writer.OperationWriterTests) ... ok
test_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_empty_signature (migrations.test_writer.OperationWriterTests) ... ok
test_expand_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_kwargs_signature (migrations.test_writer.OperationWriterTests) ... ok
test_multiline_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_nested_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests) ... ok
test_custom_operation (migrations.test_writer.WriterTests) ... ok
test_deconstruct_class_arguments (migrations.test_writer.WriterTests) ... ok
test_migration_file_header_comments (migrations.test_writer.WriterTests) ... ok
test_migration_path (migrations.test_writer.WriterTests) ... ok
test_models_import_omitted (migrations.test_writer.WriterTests) ... ERROR
test_register_non_serializer (migrations.test_writer.WriterTests) ... FAIL
test_register_serializer (migrations.test_writer.WriterTests) ... ok
test_serialize_builtin_types (migrations.test_writer.WriterTests) ... ERROR
test_serialize_builtins (migrations.test_writer.WriterTests) ... ok
test_serialize_choices (migrations.test_writer.WriterTests) ... FAIL
test_serialize_class_based_validators (migrations.test_writer.WriterTests) ... ERROR
test_serialize_collections (migrations.test_writer.WriterTests) ... ERROR
test_serialize_compiled_regex (migrations.test_writer.WriterTests) ... ok
test_serialize_constants (migrations.test_writer.WriterTests) ... ERROR
test_serialize_datetime (migrations.test_writer.WriterTests) ... ERROR
test_serialize_empty_nonempty_tuple (migrations.test_writer.WriterTests) ... ok
test_serialize_enums (migrations.test_writer.WriterTests) ... FAIL
test_serialize_fields (migrations.test_writer.WriterTests) ... ok
test_serialize_frozensets (migrations.test_writer.WriterTests) ... ok
test_serialize_functions (migrations.test_writer.WriterTests) ... FAIL
test_serialize_functools_partial (migrations.test_writer.WriterTests) ... ERROR
test_serialize_functools_partialmethod (migrations.test_writer.WriterTests) ... ERROR
test_serialize_iterators (migrations.test_writer.WriterTests) ... ERROR
test_serialize_lazy_objects (migrations.test_writer.WriterTests) ... ok
test_serialize_local_function_reference (migrations.test_writer.WriterTests)
A reference in a local scope can't be serialized. ... FAIL
test_serialize_managers (migrations.test_writer.WriterTests) ... ok
test_serialize_multiline_strings (migrations.test_writer.WriterTests) ... ok
test_serialize_numbers (migrations.test_writer.WriterTests) ... FAIL
test_serialize_range (migrations.test_writer.WriterTests) ... ERROR
test_serialize_set (migrations.test_writer.WriterTests) ... ok
test_serialize_settings (migrations.test_writer.WriterTests) ... ok
test_serialize_strings (migrations.test_writer.WriterTests) ... ok
test_serialize_timedelta (migrations.test_writer.WriterTests) ... ok
test_serialize_type_none (migrations.test_writer.WriterTests) ... ok
test_serialize_unbound_method_reference (migrations.test_writer.WriterTests)
An unbound method used within a class body can be serialized. ... ERROR
test_serialize_uuid (migrations.test_writer.WriterTests) ... ok
test_simple_migration (migrations.test_writer.WriterTests) ... ERROR
test_sorted_imports (migrations.test_writer.WriterTests) ... ok

======================================================================
ERROR: test_models_import_omitted (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 707, in test_models_import_omitted
    output = writer.as_string()
  File "/testbed/django/db/migrations/writer.py", line 141, in as_string
    operation_string, operation_imports = OperationWriter(operation).serialize()
  File "/testbed/django/db/migrations/writer.py", line 99, in serialize
    _write(arg_name, arg_value)
  File "/testbed/django/db/migrations/writer.py", line 63, in _write
    arg_string, arg_imports = MigrationWriter.serialize(_arg_value)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: {'verbose_name': 'model', 'verbose_name_plural': 'models'}
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_serialize_builtin_types (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 244, in test_serialize_builtin_types
    self.assertSerializedEqual([list, tuple, dict, set, frozenset])
  File "/testbed/tests/migrations/test_writer.py", line 184, in assertSerializedEqual
    self.assertEqual(self.serialize_round_trip(value), value)
  File "/testbed/tests/migrations/test_writer.py", line 180, in serialize_round_trip
    string, imports = MigrationWriter.serialize(value)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 37, in serialize
    item_string, item_imports = serializer_factory(item).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 36, in serialize
    for item in self.value:
TypeError: 'type' object is not iterable

======================================================================
ERROR: test_serialize_class_based_validators (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 464, in test_serialize_class_based_validators
    string = MigrationWriter.serialize(validator)[0]
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: <django.core.validators.RegexValidator object at 0x7c40b018a6a0>
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_serialize_collections (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 237, in test_serialize_collections
    self.assertSerializedEqual({1: 2})
  File "/testbed/tests/migrations/test_writer.py", line 184, in assertSerializedEqual
    self.assertEqual(self.serialize_round_trip(value), value)
  File "/testbed/tests/migrations/test_writer.py", line 180, in serialize_round_trip
    string, imports = MigrationWriter.serialize(value)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: {1: 2}
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_serialize_constants (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 216, in test_serialize_constants
    self.assertSerializedEqual(None)
  File "/testbed/tests/migrations/test_writer.py", line 184, in assertSerializedEqual
    self.assertEqual(self.serialize_round_trip(value), value)
  File "/testbed/tests/migrations/test_writer.py", line 180, in serialize_round_trip
    string, imports = MigrationWriter.serialize(value)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: None
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_serialize_datetime (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 406, in test_serialize_datetime
    self.assertSerializedEqual(datetime.datetime.utcnow)
  File "/testbed/tests/migrations/test_writer.py", line 184, in assertSerializedEqual
    self.assertEqual(self.serialize_round_trip(value), value)
  File "/testbed/tests/migrations/test_writer.py", line 180, in serialize_round_trip
    string, imports = MigrationWriter.serialize(value)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: <built-in method utcnow of type object at 0x7c40b17e4900>
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_serialize_functools_partial (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 565, in test_serialize_functools_partial
    result = self.serialize_round_trip(value)
  File "/testbed/tests/migrations/test_writer.py", line 180, in serialize_round_trip
    string, imports = MigrationWriter.serialize(value)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: functools.partial(<class 'datetime.timedelta'>, 1, seconds=2)
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_serialize_functools_partialmethod (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 572, in test_serialize_functools_partialmethod
    result = self.serialize_round_trip(value)
  File "/testbed/tests/migrations/test_writer.py", line 180, in serialize_round_trip
    string, imports = MigrationWriter.serialize(value)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: functools.partialmethod(<class 'datetime.timedelta'>, 1, seconds=2)
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_serialize_iterators (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 448, in test_serialize_iterators
    ("((0, 0), (1, 1), (2, 4))", set())
  File "/testbed/tests/migrations/test_writer.py", line 187, in assertSerializedResultEqual
    self.assertEqual(MigrationWriter.serialize(value), target)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: <generator object WriterTests.test_serialize_iterators.<locals>.<genexpr> at 0x7c40afdcc7d8>
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_serialize_range (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 517, in test_serialize_range
    string, imports = MigrationWriter.serialize(range(1, 5))
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: range(1, 5)
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_serialize_unbound_method_reference (migrations.test_writer.WriterTests)
An unbound method used within a class body can be serialized.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 528, in test_serialize_unbound_method_reference
    self.serialize_round_trip(TestModel1.thing)
  File "/testbed/tests/migrations/test_writer.py", line 180, in serialize_round_trip
    string, imports = MigrationWriter.serialize(value)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 205, in serialize
    return self.serialize_deconstructed(path, args, kwargs)
  File "/testbed/django/db/migrations/serializer.py", line 93, in serialize_deconstructed
    arg_string, arg_imports = serializer_factory(arg).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: <function TestModel1.upload_to at 0x7c40b0180400>
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
ERROR: test_simple_migration (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 608, in test_simple_migration
    output = writer.as_string()
  File "/testbed/django/db/migrations/writer.py", line 141, in as_string
    operation_string, operation_imports = OperationWriter(operation).serialize()
  File "/testbed/django/db/migrations/writer.py", line 99, in serialize
    _write(arg_name, arg_value)
  File "/testbed/django/db/migrations/writer.py", line 51, in _write
    arg_string, arg_imports = MigrationWriter.serialize(item)
  File "/testbed/django/db/migrations/writer.py", line 271, in serialize
    return serializer_factory(value).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 37, in serialize
    item_string, item_imports = serializer_factory(item).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 205, in serialize
    return self.serialize_deconstructed(path, args, kwargs)
  File "/testbed/django/db/migrations/serializer.py", line 93, in serialize_deconstructed
    arg_string, arg_imports = serializer_factory(arg).serialize()
  File "/testbed/django/db/migrations/serializer.py", line 330, in serializer_factory
    "topics/migrations/#migration-serializing" % (value, get_docs_version())
ValueError: Cannot serialize: <built-in method utcnow of type object at 0x7c40b17e4900>
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

======================================================================
FAIL: test_register_non_serializer (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 734, in test_register_non_serializer
    MigrationWriter.register_serializer(complex, TestModel1)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/contextlib.py", line 88, in __exit__
    next(self.gen)
  File "/testbed/django/test/testcases.py", line 654, in _assert_raises_or_warns_cm
    yield cm
AssertionError: ValueError not raised

======================================================================
FAIL: test_serialize_choices (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 342, in test_serialize_choices
    self.assertSerializedResultEqual(TextChoices.A, ("'A'", set()))
  File "/testbed/tests/migrations/test_writer.py", line 187, in assertSerializedResultEqual
    self.assertEqual(MigrationWriter.serialize(value), target)
AssertionError: Tuples differ: ("TextChoices['A']", {'from migrations.test_writer import TextChoices'}) != ("'A'", set())

First differing element 0:
"TextChoices['A']"
"'A'"

- ("TextChoices['A']", {'from migrations.test_writer import TextChoices'})
+ ("'A'", set())

======================================================================
FAIL: test_serialize_enums (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 274, in test_serialize_enums
    ("migrations.test_writer.TextEnum['A']", {'import migrations.test_writer'})
  File "/testbed/tests/migrations/test_writer.py", line 187, in assertSerializedResultEqual
    self.assertEqual(MigrationWriter.serialize(value), target)
AssertionError: Tuples differ: ("TextEnum['A']", {'from migrations.test_writer import TextEnum'}) != ("migrations.test_writer.TextEnum['A']", {'import migrations.test_writer'})

First differing element 0:
"TextEnum['A']"
"migrations.test_writer.TextEnum['A']"

- ("TextEnum['A']", {'from migrations.test_writer import TextEnum'})
+ ("migrations.test_writer.TextEnum['A']", {'import migrations.test_writer'})

======================================================================
FAIL: test_serialize_functions (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
ValueError: Cannot serialize: <function WriterTests.test_serialize_functions.<locals>.<lambda> at 0x7c40afdb8f28>
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 398, in test_serialize_functions
    self.assertSerializedEqual(lambda x: 42)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/contextlib.py", line 99, in __exit__
    self.gen.throw(type, value, traceback)
  File "/testbed/django/test/testcases.py", line 655, in _assert_raises_or_warns_cm
    self.assertIn(expected_message, str(getattr(cm, cm_attr)))
AssertionError: 'Cannot serialize function: lambda' not found in 'Cannot serialize: <function WriterTests.test_serialize_functions.<locals>.<lambda> at 0x7c40afdb8f28>\nThere are some values Django cannot serialize into migration files.\nFor more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing'
Testing against Django installed in '/testbed/django'
Importing application migrations
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).

======================================================================
FAIL: test_serialize_local_function_reference (migrations.test_writer.WriterTests)
A reference in a local scope can't be serialized.
----------------------------------------------------------------------
ValueError: Cannot serialize: <function WriterTests.test_serialize_local_function_reference.<locals>.TestModel2.upload_to at 0x7c40b05b2ae8>
There are some values Django cannot serialize into migration files.
For more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 538, in test_serialize_local_function_reference
    self.serialize_round_trip(TestModel2.thing)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/contextlib.py", line 99, in __exit__
    self.gen.throw(type, value, traceback)
  File "/testbed/django/test/testcases.py", line 655, in _assert_raises_or_warns_cm
    self.assertIn(expected_message, str(getattr(cm, cm_attr)))
AssertionError: 'Could not find function upload_to in migrations.test_writer' not found in 'Cannot serialize: <function WriterTests.test_serialize_local_function_reference.<locals>.TestModel2.upload_to at 0x7c40b05b2ae8>\nThere are some values Django cannot serialize into migration files.\nFor more, see https://docs.djangoproject.com/en/dev/topics/migrations/#migration-serializing'

======================================================================
FAIL: test_serialize_numbers (migrations.test_writer.WriterTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_writer.py", line 212, in test_serialize_numbers
    ("migrations.test_writer.Money('1.3')", {'import migrations.test_writer'})
  File "/testbed/tests/migrations/test_writer.py", line 187, in assertSerializedResultEqual
    self.assertEqual(MigrationWriter.serialize(value), target)
AssertionError: Tuples differ: ("Decimal('1.3')", {'from decimal import Decimal'}) != ("migrations.test_writer.Money('1.3')", {'import migrations.test_writer'})

First differing element 0:
"Decimal('1.3')"
"migrations.test_writer.Money('1.3')"

- ("Decimal('1.3')", {'from decimal import Decimal'})
+ ("migrations.test_writer.Money('1.3')", {'import migrations.test_writer'})

----------------------------------------------------------------------
Ran 46 tests in 0.013s

FAILED (failures=6, errors=12)
+ git checkout e02f67ef2d03d48128e7a118bf75f0418e24e8ac tests/migrations/test_writer.py
Updated 1 path from 8430cb2f3f
