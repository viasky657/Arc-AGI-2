diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py
index a7d52a91c..672127c24 100644
--- a/sphinx/ext/viewcode.py
+++ b/sphinx/ext/viewcode.py
@@ -8,7 +8,9 @@
     :license: BSD, see LICENSE for details.
 """
 
+import os
 import posixpath
+import shutil
 import traceback
 from os import path
 from typing import Any, Dict, Generator, Iterable, Optional, Set, Tuple, cast
@@ -50,13 +52,34 @@ def _get_full_modname(app: Sphinx, modname: str, attribute: str) -> Optional[str
         return None
 
 
+def is_epub_builder(builder_name: str) -> bool:
+    """Check if the builder is an epub builder."""
+    return bool(builder_name and builder_name.startswith('epub'))
+
+
+def should_view_code(builder_name: Optional[str], viewcode_enable_epub: bool) -> bool:
+    """Determine whether code module pages should be generated."""
+    # Only show viewcode pages if:
+    # 1. Not a singlehtml builder
+    # 2. Not an epub builder, or epub builder with viewcode_enable_epub=True
+    if not builder_name:
+        return True
+
+    if builder_name == 'singlehtml':
+        return False
+
+    if is_epub_builder(builder_name):
+        return bool(viewcode_enable_epub)
+
+    return True
+
+
 def doctree_read(app: Sphinx, doctree: Node) -> None:
     env = app.builder.env
     if not hasattr(env, '_viewcode_modules'):
         env._viewcode_modules = {}  # type: ignore
-    if app.builder.name == "singlehtml":
-        return
-    if app.builder.name.startswith("epub") and not env.config.viewcode_enable_epub:
+
+    if not should_view_code(getattr(app.builder, 'name', ''), env.config.viewcode_enable_epub):
         return
 
     def has_tag(modname: str, fullname: str, docname: str, refname: str) -> bool:
@@ -118,8 +141,8 @@ def doctree_read(app: Sphinx, doctree: Node) -> None:
             inline = nodes.inline('', _('[source]'), classes=['viewcode-link'])
             onlynode = addnodes.only(expr='html')
             onlynode += addnodes.pending_xref('', inline, reftype='viewcode', refdomain='std',
-                                              refexplicit=False, reftarget=pagename,
-                                              refid=fullname, refdoc=env.docname)
+                                          refexplicit=False, reftarget=pagename,
+                                          refid=fullname, refdoc=env.docname)
             signode += onlynode
 
 
@@ -144,49 +167,27 @@ def missing_reference(app: Sphinx, env: BuildEnvironment, node: Element, contnod
     return None
 
 
-def get_module_filename(app: Sphinx, modname: str) -> Optional[str]:
-    """Get module filename for *modname*."""
-    source_info = app.emit_firstresult('viewcode-find-source', modname)
-    if source_info:
-        return None
-    else:
-        try:
-            filename, source = ModuleAnalyzer.get_module_source(modname)
-            return filename
-        except Exception:
-            return None
-
-
-def should_generate_module_page(app: Sphinx, modname: str) -> bool:
-    """Check generation of module page is needed."""
-    module_filename = get_module_filename(app, modname)
-    if module_filename is None:
-        # Always (re-)generate module page when module filename is not found.
-        return True
-
-    builder = cast(StandaloneHTMLBuilder, app.builder)
-    basename = modname.replace('.', '/') + builder.out_suffix
-    page_filename = path.join(app.outdir, '_modules/', basename)
-
-    try:
-        if path.getmtime(module_filename) <= path.getmtime(page_filename):
-            # generation is not needed if the HTML page is newer than module file.
-            return False
-    except IOError:
-        pass
-
-    return True
-
-
 def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:
     env = app.builder.env
     if not hasattr(env, '_viewcode_modules'):
         return
+
+    builder_name = getattr(app.builder, 'name', '')
+    if not should_view_code(builder_name, env.config.viewcode_enable_epub):
+        return
+
     highlighter = app.builder.highlighter  # type: ignore
     urito = app.builder.get_relative_uri
 
     modnames = set(env._viewcode_modules)  # type: ignore
 
+    # Create or clean up the _modules directory
+    modules_dir = os.path.join(app.builder.outdir, OUTPUT_DIRNAME)
+    if should_view_code(builder_name, env.config.viewcode_enable_epub):
+        if path.exists(modules_dir):
+            shutil.rmtree(modules_dir)
+        os.makedirs(modules_dir)
+
     for modname, entry in status_iterator(
             sorted(env._viewcode_modules.items()),  # type: ignore
             __('highlighting module code... '), "blue",
@@ -194,27 +195,19 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
             app.verbosity, lambda x: x[0]):
         if not entry:
             continue
-        if not should_generate_module_page(app, modname):
-            continue
 
         code, tags, used, refname = entry
-        # construct a page name for the highlighted source
         pagename = posixpath.join(OUTPUT_DIRNAME, modname.replace('.', '/'))
-        # highlight the source using the builder's highlighter
+
         if env.config.highlight_language in ('python3', 'default', 'none'):
             lexer = env.config.highlight_language
         else:
             lexer = 'python'
         highlighted = highlighter.highlight_block(code, lexer, linenos=False)
-        # split the code into lines
         lines = highlighted.splitlines()
-        # split off wrap markup from the first line of the actual code
         before, after = lines[0].split('<pre>')
         lines[0:1] = [before + '<pre>', after]
-        # nothing to do for the last line; it always starts with </pre> anyway
-        # now that we have code lines (starting at index 1), insert anchors for
-        # the collected tags (HACK: this only works if the tag boundaries are
-        # properly nested!)
+
         maxindex = len(lines) - 1
         for name, docname in used.items():
             type, start, end = tags[name]
@@ -224,7 +217,7 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
                 'href="%s">%s</a>' % (name, backlink, _('[docs]')) +
                 lines[start])
             lines[min(end, maxindex)] += '</div>'
-        # try to find parents (for submodules)
+
         parents = []
         parent = modname
         while '.' in parent:
@@ -237,7 +230,7 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
         parents.append({'link': urito(pagename, posixpath.join(OUTPUT_DIRNAME, 'index')),
                         'title': _('Module code')})
         parents.reverse()
-        # putting it all together
+
         context = {
             'parents': parents,
             'title': modname,
@@ -250,7 +243,6 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
         return
 
     html = ['\n']
-    # the stack logic is needed for using nested lists for submodules
     stack = ['']
     for modname in sorted(modnames):
         if modname.startswith(stack[-1]):
@@ -258,38 +250,50 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
             html.append('<ul>')
         else:
             stack.pop()
-            while not modname.startswith(stack[-1]):
-                stack.pop()
-                html.append('</ul>')
             stack.append(modname + '.')
-        html.append('<li><a href="%s">%s</a></li>\n' % (
-            urito(posixpath.join(OUTPUT_DIRNAME, 'index'),
-                  posixpath.join(OUTPUT_DIRNAME, modname.replace('.', '/'))),
-            modname))
-    html.append('</ul>' * (len(stack) - 1))
+            html.append('</ul>' * (len(stack) - 1) + '<ul>')
+        if modname in env._viewcode_modules and env._viewcode_modules[modname]:  # type: ignore
+            pagename = posixpath.join(OUTPUT_DIRNAME, modname.replace('.', '/'))
+            html.append('<li><a href="%s">%s</a></li>\n' % (
+                urito(OUTPUT_DIRNAME + '/index', pagename), modname))
+
+    if html == ['\n']:  # no documented Python objects
+        return
+
+    html.append('</ul>' * len(stack))
     context = {
         'title': _('Overview: module code'),
         'body': (_('<h1>All modules for which code is available</h1>') +
                  ''.join(html)),
     }
-
     yield (posixpath.join(OUTPUT_DIRNAME, 'index'), context, 'page.html')
 
 
+def builder_inited(app: Sphinx) -> None:
+    # Early cleanup of _modules directory to avoid any stale content
+    if not hasattr(app.builder, 'outdir'):
+        return
+
+    modules_dir = path.join(app.builder.outdir, OUTPUT_DIRNAME)
+    if not should_view_code(getattr(app.builder, 'name', ''),
+                          app.builder.env.config.viewcode_enable_epub):
+        if path.exists(modules_dir):
+            shutil.rmtree(modules_dir)
+
+
 def setup(app: Sphinx) -> Dict[str, Any]:
-    app.add_config_value('viewcode_import', None, False)
     app.add_config_value('viewcode_enable_epub', False, False)
     app.add_config_value('viewcode_follow_imported_members', True, False)
+    app.add_event('viewcode-find-source')
+    app.add_event('viewcode-follow-imported')
+    
+    app.connect('builder-inited', builder_inited)
     app.connect('doctree-read', doctree_read)
     app.connect('env-merge-info', env_merge_info)
     app.connect('html-collect-pages', collect_pages)
     app.connect('missing-reference', missing_reference)
-    # app.add_config_value('viewcode_include_modules', [], 'env')
-    # app.add_config_value('viewcode_exclude_modules', [], 'env')
-    app.add_event('viewcode-find-source')
-    app.add_event('viewcode-follow-imported')
+
     return {
         'version': sphinx.__display_version__,
-        'env_version': 1,
         'parallel_read_safe': True
-    }
+    }
\ No newline at end of file
