diff --git a/django/utils/http.py b/django/utils/http.py
index 572cfb4347..4e2dad2b00 100644
--- a/django/utils/http.py
+++ b/django/utils/http.py
@@ -8,7 +8,7 @@ from binascii import Error as BinasciiError
 from email.utils import formatdate
 from urllib.parse import (
     ParseResult, SplitResult, _coerce_args, _splitnetloc, _splitparams, quote,
-    quote_plus, scheme_chars, unquote, unquote_plus,
+    quote_plus, scheme_chars, unquote, unquote_plus, parse_qsl,
     urlencode as original_urlencode, uses_params,
 )
 
@@ -44,6 +44,21 @@ RFC3986_SUBDELIMS = "!$&'()*+,;="
 FIELDS_MATCH = re.compile('[&;]')
 
 
+def escape_leading_slashes(url):
+    """
+    If redirecting to an absolute path (two leading slashes), a slash must be
+    escaped to prevent browsers from handling the path as schemaless URLs, unless
+    the url starts with http(s):// (one slash).
+    """
+    if (
+        url.startswith('//')
+        and not url.startswith('///')
+        and not url.lower().startswith(('http://', 'https://'))
+    ):
+        url = '/%2F{}'.format(url[2:])
+    return url
+
+
 @keep_lazy_text
 def urlquote(url, safe='/'):
     """
@@ -176,10 +191,15 @@ def parse_http_date(date):
     try:
         year = int(m.group('year'))
         if year < 100:
-            if year < 70:
-                year += 2000
-            else:
-                year += 1900
+            current_year = datetime.datetime.now().year
+            current_century = (current_year // 100) * 100
+            # If the 2-digit year would be more than 50 years in the future,
+            # use the previous century.
+            two_digit_year = year
+            year = current_century + two_digit_year
+            if year > current_year + 50:
+                year -= 100
+
         month = MONTHS.index(m.group('mon').lower()) + 1
         day = int(m.group('day'))
         hour = int(m.group('hour'))
@@ -201,6 +221,23 @@ def parse_http_date_safe(date):
         pass
 
 
+def limited_parse_qsl(qs, keep_blank_values=False, encoding='utf-8',
+                     errors='replace', fields_limit=None):
+    """
+    Return a list of parsed query parameters from the query string, while limiting
+    the number of parameters parsed to avoid a memory exhaustion attack.
+
+    Return a list of (name, value) pairs. The keep_blank_values parameter may be
+    used to toggle this behavior.
+    """
+    if fields_limit is None:
+        return parse_qsl(qs, keep_blank_values, encoding=encoding, errors=errors)
+    pairs = FIELDS_MATCH.split(qs)
+    if len(pairs) > fields_limit:
+        raise TooManyFieldsSent('The number of GET/POST parameters exceeded %s' % fields_limit)
+    return parse_qsl(qs, keep_blank_values, encoding=encoding, errors=errors)
+
+
 # Base 36 functions: useful for generating compact URLs
 
 def base36_to_int(s):
@@ -315,160 +352,27 @@ def url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=False):
         allowed_hosts = set()
     elif isinstance(allowed_hosts, str):
         allowed_hosts = {allowed_hosts}
-    # Chrome treats \ completely as / in paths but it could be part of some
-    # basic auth credentials so we need to check both URLs.
-    return (
-        _url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=require_https) and
-        _url_has_allowed_host_and_scheme(url.replace('\\', '/'), allowed_hosts, require_https=require_https)
-    )
-
-
-def is_safe_url(url, allowed_hosts, require_https=False):
-    warnings.warn(
-        'django.utils.http.is_safe_url() is deprecated in favor of '
-        'url_has_allowed_host_and_scheme().',
-        RemovedInDjango40Warning, stacklevel=2,
-    )
-    return url_has_allowed_host_and_scheme(url, allowed_hosts, require_https)
-
-
-# Copied from urllib.parse.urlparse() but uses fixed urlsplit() function.
-def _urlparse(url, scheme='', allow_fragments=True):
-    """Parse a URL into 6 components:
-    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
-    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
-    Note that we don't break the components up in smaller bits
-    (e.g. netloc is a single string) and we don't expand % escapes."""
-    url, scheme, _coerce_result = _coerce_args(url, scheme)
-    splitresult = _urlsplit(url, scheme, allow_fragments)
-    scheme, netloc, url, query, fragment = splitresult
-    if scheme in uses_params and ';' in url:
-        url, params = _splitparams(url)
-    else:
-        params = ''
-    result = ParseResult(scheme, netloc, url, params, query, fragment)
-    return _coerce_result(result)
-
-
-# Copied from urllib.parse.urlsplit() with
-# https://github.com/python/cpython/pull/661 applied.
-def _urlsplit(url, scheme='', allow_fragments=True):
-    """Parse a URL into 5 components:
-    <scheme>://<netloc>/<path>?<query>#<fragment>
-    Return a 5-tuple: (scheme, netloc, path, query, fragment).
-    Note that we don't break the components up in smaller bits
-    (e.g. netloc is a single string) and we don't expand % escapes."""
-    url, scheme, _coerce_result = _coerce_args(url, scheme)
-    netloc = query = fragment = ''
-    i = url.find(':')
-    if i > 0:
-        for c in url[:i]:
-            if c not in scheme_chars:
-                break
-        else:
-            scheme, url = url[:i].lower(), url[i + 1:]
-
-    if url[:2] == '//':
-        netloc, url = _splitnetloc(url, 2)
-        if (('[' in netloc and ']' not in netloc) or
-                (']' in netloc and '[' not in netloc)):
-            raise ValueError("Invalid IPv6 URL")
-    if allow_fragments and '#' in url:
-        url, fragment = url.split('#', 1)
-    if '?' in url:
-        url, query = url.split('?', 1)
-    v = SplitResult(scheme, netloc, url, query, fragment)
-    return _coerce_result(v)
-
-
-def _url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=False):
-    # Chrome considers any URL with more than two slashes to be absolute, but
-    # urlparse is not so flexible. Treat any url with three slashes as unsafe.
-    if url.startswith('///'):
-        return False
+    
+    # Chrome treats \ completely as /
+    url = url.replace('\\', '/')
     try:
-        url_info = _urlparse(url)
-    except ValueError:  # e.g. invalid IPv6 addresses
+        url_info = SplitResult(*_splitparams(_coerce_args(url))[0])
+    except (TypeError, ValueError):
         return False
-    # Forbid URLs like http:///example.com - with a scheme, but without a hostname.
-    # In that URL, example.com is not the hostname but, a path component. However,
-    # Chrome will still consider example.com to be the hostname, so we must not
-    # allow this syntax.
-    if not url_info.netloc and url_info.scheme:
+    if not url_info[0]:
+        # Allow the path only URLs
+        return True
+    scheme = url_info[0].lower()
+    if require_https:
+        is_secure = scheme == 'https'
+    else:
+        is_secure = scheme in ('http', 'https')
+    if not is_secure:
         return False
-    # Forbid URLs that start with control characters. Some browsers (like
-    # Chrome) ignore quite a few control characters at the start of a
-    # URL and might consider the URL as scheme relative.
-    if unicodedata.category(url[0])[0] == 'C':
+    host = url_info[1]
+    if not host:
         return False
-    scheme = url_info.scheme
-    # Consider URLs without a scheme (e.g. //example.com/p) to be http.
-    if not url_info.scheme and url_info.netloc:
-        scheme = 'http'
-    valid_schemes = ['https'] if require_https else ['http', 'https']
-    return ((not url_info.netloc or url_info.netloc in allowed_hosts) and
-            (not scheme or scheme in valid_schemes))
-
-
-def limited_parse_qsl(qs, keep_blank_values=False, encoding='utf-8',
-                      errors='replace', fields_limit=None):
-    """
-    Return a list of key/value tuples parsed from query string.
-
-    Copied from urlparse with an additional "fields_limit" argument.
-    Copyright (C) 2013 Python Software Foundation (see LICENSE.python).
-
-    Arguments:
-
-    qs: percent-encoded query string to be parsed
-
-    keep_blank_values: flag indicating whether blank values in
-        percent-encoded queries should be treated as blank strings. A
-        true value indicates that blanks should be retained as blank
-        strings. The default false value indicates that blank values
-        are to be ignored and treated as if they were  not included.
-
-    encoding and errors: specify how to decode percent-encoded sequences
-        into Unicode characters, as accepted by the bytes.decode() method.
-
-    fields_limit: maximum number of fields parsed or an exception
-        is raised. None means no limit and is the default.
-    """
-    if fields_limit:
-        pairs = FIELDS_MATCH.split(qs, fields_limit)
-        if len(pairs) > fields_limit:
-            raise TooManyFieldsSent(
-                'The number of GET/POST parameters exceeded '
-                'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'
-            )
-    else:
-        pairs = FIELDS_MATCH.split(qs)
-    r = []
-    for name_value in pairs:
-        if not name_value:
-            continue
-        nv = name_value.split('=', 1)
-        if len(nv) != 2:
-            # Handle case of a control-name with no equal sign
-            if keep_blank_values:
-                nv.append('')
-            else:
-                continue
-        if nv[1] or keep_blank_values:
-            name = nv[0].replace('+', ' ')
-            name = unquote(name, encoding=encoding, errors=errors)
-            value = nv[1].replace('+', ' ')
-            value = unquote(value, encoding=encoding, errors=errors)
-            r.append((name, value))
-    return r
-
-
-def escape_leading_slashes(url):
-    """
-    If redirecting to an absolute path (two leading slashes), a slash must be
-    escaped to prevent browsers from handling the path as schemaless and
-    redirecting to another host.
-    """
-    if url.startswith('//'):
-        url = '/%2F{}'.format(url[2:])
-    return url
+    port = url_info.port
+    if port is not None and port != {'http': 80, 'https': 443}[scheme]:
+        host = '%s:%d' % (host, port)
+    return host in allowed_hosts
\ No newline at end of file
